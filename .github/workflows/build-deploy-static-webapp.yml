name: Azure Static Web App Build and Deploy

# Trigger on pushes to "dev" and manual dispatch for "main"
on:
  push:
    branches:
      - dev  # Auto-deploy for development branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (optional)'
        required: false
        default: 'production'

jobs:
  build_job:
    name: Build Web App
    runs-on: ubuntu-latest
    outputs:
      output-dir: ${{ steps.set-output.outputs.output-dir }}  # Export the build folder path for later use
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true   # Fetch submodules if used
          lfs: false         # Disable Git LFS if not needed

      - name: Set output directory
        id: set-output
        run: echo "output-dir=dashboard/build" >> $GITHUB_OUTPUT  # Set build output directory

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify Node.js version

      - name: Install dependencies
        run: |
          cd dashboard
          npm ci  # Clean install dependencies based on package-lock.json

      - name: Build project
        run: |
          cd dashboard
          npm run build  # Run the build script

      - name: Print folder structure
        run: |
          echo "📁 Project folder structure:"
          tree -L 3 || find .  # List files (using tree if available, fallback to find)

      - name: Upload artifact
        uses: actions/upload-artifact@v4  # Upload the build output for deployment
        with:
          name: webapp-build
          path: dashboard/build  # Folder to upload

  deploy_job:
    name: Deploy to Azure Static Web App (Dev/Prod)
    runs-on: ubuntu-latest
    needs: build_job  # Ensure build completes first
    # Run if it's a push on dev OR a manual dispatch on main:
    if: ${{ (github.ref_name == 'dev' && github.event_name == 'push') || (github.ref_name == 'main' && github.event_name == 'workflow_dispatch') }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3  # Download the build artifact from the build job
        with:
          name: webapp-build  # Must match the upload name exactly
          path: build-output  # Extract the artifact to this folder

      - name: Login to Azure
        uses: azure/login@v1  # Authenticate with Azure using your service principal credentials
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI Static Web Apps extension
        run: az extension add --name webapp  # Install the Azure CLI extension for static web apps

      - name: Set target app name
        id: set-app
        run: |
          # Use "nwmiws-dev" if on the dev branch; use "nwmiws" for production (manual dispatch on main)
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "app_name=nwmiws-dev" >> $GITHUB_OUTPUT
          else
            echo "app_name=nwmiws" >> $GITHUB_OUTPUT
          fi

      - name: Check if Static Web App exists; create if not
        run: |
          # Retrieve the target app name from the previous step
          APP_NAME="${{ steps.set-app.outputs.app_name }}"
          RG="ppa-rg"
          LOCATION="eastus2"
          SKU="Free"
          echo "Checking if Static Web App '$APP_NAME' exists in resource group '$RG'..."
          if az staticwebapp show --name "$APP_NAME" --resource-group "$RG" > /dev/null 2>&1; then
            echo "Static Web App '$APP_NAME' exists."
          else
            echo "Static Web App '$APP_NAME' does not exist. Creating it..."
            az staticwebapp create \
              --name "$APP_NAME" \
              --resource-group "$RG" \
              --location "$LOCATION" \
              --sku "$SKU" \
              --source build-output \
              --branch "${{ github.ref_name }}"
          fi

      - name: Deploy to Azure Static Web App
        run: |
          # Deploy the build output using the Azure CLI upload command
          APP_NAME="${{ steps.set-app.outputs.app_name }}"
          RG="ppa-rg"
          az staticwebapp upload \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --source build-output
