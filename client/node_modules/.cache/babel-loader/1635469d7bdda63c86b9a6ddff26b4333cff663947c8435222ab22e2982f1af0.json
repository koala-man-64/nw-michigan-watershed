{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Data() {\n  _s();\n  // List of available CSV files in the public folder\n  const csvFiles = [\"locations.csv\", \"water_quality_data.csv\"];\n  const [selectedFile, setSelectedFile] = useState(csvFiles[0]);\n  const [csvData, setCsvData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Function to load CSV file from public folder\n  const loadCSV = fileName => {\n    setLoading(true);\n    fetch(`/${fileName}`).then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        complete: result => {\n          setCsvData(result.data);\n          setLoading(false);\n        }\n      });\n    }).catch(error => {\n      console.error(\"Error loading CSV:\", error);\n      setLoading(false);\n    });\n  };\n\n  // Load CSV whenever the selected file changes\n  useEffect(() => {\n    loadCSV(selectedFile);\n  }, [selectedFile]);\n\n  // Handle changes in CSV data cells\n  const handleChange = (rowIndex, field, newValue) => {\n    const updatedData = [...csvData];\n    updatedData[rowIndex][field] = newValue;\n    setCsvData(updatedData);\n  };\n\n  // Commit save function: simulate saving by downloading the updated CSV file\n  const commitSave = () => {\n    const csv = Papa.unparse(csvData);\n    const blob = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    // Append '_updated' to the filename before downloading\n    const updatedFileName = selectedFile.replace(\".csv\", \"_updated.csv\");\n    link.download = updatedFileName;\n    link.click();\n    // In a real application, you might send the updated data to a backend server here.\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading CSV data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"csv-select\",\n        children: \"Select CSV File: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"csv-select\",\n        value: selectedFile,\n        onChange: e => setSelectedFile(e.target.value),\n        children: csvFiles.map((file, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: file,\n          children: file\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"5\",\n      cellSpacing: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: csvData.length > 0 && Object.keys(csvData[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: csvData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.entries(row).map(([field, value], colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value,\n              onChange: e => handleChange(rowIndex, field, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: commitSave,\n      children: \"Commit Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(Data, \"apMcYVI/Us8zD/6fAK6IdEHvx28=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","Papa","jsxDEV","_jsxDEV","Data","_s","csvFiles","selectedFile","setSelectedFile","csvData","setCsvData","loading","setLoading","loadCSV","fileName","fetch","then","response","text","csvText","parse","header","complete","result","data","catch","error","console","handleChange","rowIndex","field","newValue","updatedData","commitSave","csv","unparse","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","updatedFileName","replace","download","click","children","_jsxFileName","lineNumber","columnNumber","style","padding","marginBottom","htmlFor","id","value","onChange","e","target","map","file","idx","border","cellPadding","cellSpacing","length","Object","keys","index","row","entries","colIndex","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/Data.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\n\r\nfunction Data() {\r\n  // List of available CSV files in the public folder\r\n  const csvFiles = [\"locations.csv\", \"water_quality_data.csv\"];\r\n  const [selectedFile, setSelectedFile] = useState(csvFiles[0]);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Function to load CSV file from public folder\r\n  const loadCSV = (fileName) => {\r\n    setLoading(true);\r\n    fetch(`/${fileName}`)\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          complete: (result) => {\r\n            setCsvData(result.data);\r\n            setLoading(false);\r\n          }\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading CSV:\", error);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // Load CSV whenever the selected file changes\r\n  useEffect(() => {\r\n    loadCSV(selectedFile);\r\n  }, [selectedFile]);\r\n\r\n  // Handle changes in CSV data cells\r\n  const handleChange = (rowIndex, field, newValue) => {\r\n    const updatedData = [...csvData];\r\n    updatedData[rowIndex][field] = newValue;\r\n    setCsvData(updatedData);\r\n  };\r\n\r\n  // Commit save function: simulate saving by downloading the updated CSV file\r\n  const commitSave = () => {\r\n    const csv = Papa.unparse(csvData);\r\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    // Append '_updated' to the filename before downloading\r\n    const updatedFileName = selectedFile.replace(\".csv\", \"_updated.csv\");\r\n    link.download = updatedFileName;\r\n    link.click();\r\n    // In a real application, you might send the updated data to a backend server here.\r\n  };\r\n\r\n  if (loading) return <div>Loading CSV data...</div>;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h2>Data Editor</h2>\r\n      {/* CSV File Selection */}\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <label htmlFor=\"csv-select\">Select CSV File: </label>\r\n        <select\r\n          id=\"csv-select\"\r\n          value={selectedFile}\r\n          onChange={(e) => setSelectedFile(e.target.value)}\r\n        >\r\n          {csvFiles.map((file, idx) => (\r\n            <option key={idx} value={file}>\r\n              {file}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {/* Editable CSV Data Table */}\r\n      <table border=\"1\" cellPadding=\"5\" cellSpacing=\"0\">\r\n        <thead>\r\n          <tr>\r\n            {csvData.length > 0 &&\r\n              Object.keys(csvData[0]).map((header, index) => (\r\n                <th key={index}>{header}</th>\r\n              ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {csvData.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {Object.entries(row).map(([field, value], colIndex) => (\r\n                <td key={colIndex}>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={(e) =>\r\n                      handleChange(rowIndex, field, e.target.value)\r\n                    }\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n      {/* Commit Save Button */}\r\n      <button onClick={commitSave}>Commit Save</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Data;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}