{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { logPolicy } from \"./policies/logPolicy.js\";\nimport { createEmptyPipeline } from \"./pipeline.js\";\nimport { redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { agentPolicy } from \"./policies/agentPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n  var _a;\n  const pipeline = createEmptyPipeline();\n  if (isNodeLike) {\n    if (options.agent) {\n      pipeline.addPolicy(agentPolicy(options.agent));\n    }\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n  pipeline.addPolicy(formDataPolicy(), {\n    beforePolicies: [multipartPolicyName]\n  });\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n  // The multipart policy is added after policies with no phase, so that\n  // policies can be added between it and formDataPolicy to modify\n  // properties (e.g., making the boundary constant in recorded tests).\n  pipeline.addPolicy(multipartPolicy(), {\n    afterPhase: \"Deserialize\"\n  });\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), {\n    phase: \"Retry\"\n  });\n  pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n    afterPhase: \"Retry\"\n  });\n  if (isNodeLike) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), {\n      afterPhase: \"Retry\"\n    });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), {\n    afterPhase: \"Sign\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["logPolicy","createEmptyPipeline","redirectPolicy","userAgentPolicy","multipartPolicy","multipartPolicyName","decompressResponsePolicy","defaultRetryPolicy","formDataPolicy","isNodeLike","proxyPolicy","setClientRequestIdPolicy","agentPolicy","tlsPolicy","tracingPolicy","createPipelineFromOptions","options","pipeline","agent","addPolicy","tlsOptions","proxyOptions","beforePolicies","userAgentOptions","_a","telemetryOptions","clientRequestIdHeaderName","afterPhase","retryOptions","phase","Object","assign","loggingOptions","redirectOptions"],"sources":["C:\\Users\\rdpro\\Projects\\NW Michigan Watershed Coalition\\client\\node_modules\\@azure\\core-rest-pipeline\\src\\createPipelineFromOptions.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { type LogPolicyOptions, logPolicy } from \"./policies/logPolicy.js\";\nimport { type Pipeline, createEmptyPipeline } from \"./pipeline.js\";\nimport type { Agent, PipelineRetryOptions, ProxySettings, TlsSettings } from \"./interfaces.js\";\nimport { type RedirectPolicyOptions, redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { type UserAgentPolicyOptions, userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { agentPolicy } from \"./policies/agentPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\n\n/**\n * Defines options that are used to configure the HTTP pipeline for\n * an SDK client.\n */\nexport interface PipelineOptions {\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: PipelineRetryOptions;\n\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxySettings;\n\n  /** Options for configuring Agent instance for outgoing requests */\n  agent?: Agent;\n\n  /** Options for configuring TLS authentication */\n  tlsOptions?: TlsSettings;\n\n  /**\n   * Options for how redirect responses are handled.\n   */\n  redirectOptions?: RedirectPolicyOptions;\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentPolicyOptions;\n\n  /**\n   * Options for setting common telemetry and tracing info to outgoing requests.\n   */\n  telemetryOptions?: TelemetryOptions;\n}\n\n/**\n * Defines options that are used to configure common telemetry and tracing info\n */\nexport interface TelemetryOptions {\n  /**\n   * The name of the header to pass the request ID to.\n   */\n  clientRequestIdHeaderName?: string;\n}\n\n/**\n * Defines options that are used to configure internal options of\n * the HTTP pipeline for an SDK client.\n */\nexport interface InternalPipelineOptions extends PipelineOptions {\n  /**\n   * Options to configure request/response logging.\n   */\n  loggingOptions?: LogPolicyOptions;\n}\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options: InternalPipelineOptions): Pipeline {\n  const pipeline = createEmptyPipeline();\n\n  if (isNodeLike) {\n    if (options.agent) {\n      pipeline.addPolicy(agentPolicy(options.agent));\n    }\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n\n  pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy(options.telemetryOptions?.clientRequestIdHeaderName));\n  // The multipart policy is added after policies with no phase, so that\n  // policies can be added between it and formDataPolicy to modify\n  // properties (e.g., making the boundary constant in recorded tests).\n  pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n  pipeline.addPolicy(tracingPolicy({ ...options.userAgentOptions, ...options.loggingOptions }), {\n    afterPhase: \"Retry\",\n  });\n  if (isNodeLike) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n\n  return pipeline;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAAgCA,SAAS,QAAQ,yBAAyB;AAC1E,SAAwBC,mBAAmB,QAAQ,eAAe;AAElE,SAAqCC,cAAc,QAAQ,8BAA8B;AACzF,SAAsCC,eAAe,QAAQ,+BAA+B;AAC5F,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,+BAA+B;AACpF,SAASC,wBAAwB,QAAQ,wCAAwC;AACjF,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,wBAAwB,QAAQ,wCAAwC;AACjF,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,aAAa,QAAQ,6BAA6B;AA4D3D;;;;AAIA,OAAM,SAAUC,yBAAyBA,CAACC,OAAgC;;EACxE,MAAMC,QAAQ,GAAGhB,mBAAmB,EAAE;EAEtC,IAAIQ,UAAU,EAAE;IACd,IAAIO,OAAO,CAACE,KAAK,EAAE;MACjBD,QAAQ,CAACE,SAAS,CAACP,WAAW,CAACI,OAAO,CAACE,KAAK,CAAC,CAAC;IAChD;IACA,IAAIF,OAAO,CAACI,UAAU,EAAE;MACtBH,QAAQ,CAACE,SAAS,CAACN,SAAS,CAACG,OAAO,CAACI,UAAU,CAAC,CAAC;IACnD;IACAH,QAAQ,CAACE,SAAS,CAACT,WAAW,CAACM,OAAO,CAACK,YAAY,CAAC,CAAC;IACrDJ,QAAQ,CAACE,SAAS,CAACb,wBAAwB,EAAE,CAAC;EAChD;EAEAW,QAAQ,CAACE,SAAS,CAACX,cAAc,EAAE,EAAE;IAAEc,cAAc,EAAE,CAACjB,mBAAmB;EAAC,CAAE,CAAC;EAC/EY,QAAQ,CAACE,SAAS,CAAChB,eAAe,CAACa,OAAO,CAACO,gBAAgB,CAAC,CAAC;EAC7DN,QAAQ,CAACE,SAAS,CAACR,wBAAwB,CAAC,CAAAa,EAAA,GAAAR,OAAO,CAACS,gBAAgB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,yBAAyB,CAAC,CAAC;EACjG;EACA;EACA;EACAT,QAAQ,CAACE,SAAS,CAACf,eAAe,EAAE,EAAE;IAAEuB,UAAU,EAAE;EAAa,CAAE,CAAC;EACpEV,QAAQ,CAACE,SAAS,CAACZ,kBAAkB,CAACS,OAAO,CAACY,YAAY,CAAC,EAAE;IAAEC,KAAK,EAAE;EAAO,CAAE,CAAC;EAChFZ,QAAQ,CAACE,SAAS,CAACL,aAAa,CAAAgB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMf,OAAO,CAACO,gBAAgB,GAAKP,OAAO,CAACgB,cAAc,EAAG,EAAE;IAC5FL,UAAU,EAAE;GACb,CAAC;EACF,IAAIlB,UAAU,EAAE;IACd;IACA;IACAQ,QAAQ,CAACE,SAAS,CAACjB,cAAc,CAACc,OAAO,CAACiB,eAAe,CAAC,EAAE;MAAEN,UAAU,EAAE;IAAO,CAAE,CAAC;EACtF;EACAV,QAAQ,CAACE,SAAS,CAACnB,SAAS,CAACgB,OAAO,CAACgB,cAAc,CAAC,EAAE;IAAEL,UAAU,EAAE;EAAM,CAAE,CAAC;EAE7E,OAAOV,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}