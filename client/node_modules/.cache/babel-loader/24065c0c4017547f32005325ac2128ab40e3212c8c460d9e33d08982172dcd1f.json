{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import Papa from\"papaparse\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Filters(_ref){let{onFilterChange,selectedSites}=_ref;// Page-level configuration variables for Azure Blob Storage.\nconst storageAccountName=\"ppastorageaccount159\";const sasToken=\"sv=2024-11-04&ss=bfqt&srt=sco&sp=rwd&se=2045-03-20T12:52:05Z&st=2025-03-13T04:52:05Z&spr=https,http&sig=7lAkSTM%2F7Gd4RCmeLiUXqAfNsWYrZx65sJnnrFDAxpo%3D\";const containerName=\"nwmiws\";// State for all available sites (not the selected ones).\nconst[sites,setSites]=useState([]);const[searchQuery,setSearchQuery]=useState(\"\");// Parameter state\nconst[selectedParameters,setSelectedParameters]=useState([]);// Year range state\nconst[availableYears,setAvailableYears]=useState([]);const[startYear,setStartYear]=useState(null);const[endYear,setEndYear]=useState(null);// 1. Load all site names from `locations.csv` from Azure Blob Storage.\nuseEffect(()=>{const url=`https://${storageAccountName}.blob.core.windows.net/${containerName}/locations.csv?${sasToken}`;fetch(url).then(response=>response.text()).then(csvText=>{Papa.parse(csvText,{header:true,skipEmptyLines:true,complete:result=>{// Assume each row has a \"name\" or \"Location\" field.\nconst allSites=result.data.map(row=>row.name||row.Location).filter(site=>site);// Remove empty values.\n// Remove duplicates and sort.\nconst uniqueSites=[...new Set(allSites)].sort();setSites(uniqueSites);}});}).catch(error=>{console.error(\"Error loading locations CSV:\",error);});},[storageAccountName,containerName,sasToken]);// 2. Load years from `water_quality_data.csv` from Azure Blob Storage.\nuseEffect(()=>{const processYearData=data=>{const years=data.map(row=>parseInt(row.Year)).filter(y=>!isNaN(y));if(years.length===0)return;const uniqueYears=[...new Set(years)].sort((a,b)=>a-b);const min=uniqueYears[0];const max=uniqueYears[uniqueYears.length-1];setAvailableYears(uniqueYears);setStartYear(min);setEndYear(max);onFilterChange(prev=>({...prev,startDate:new Date(min,0,1),endDate:new Date(max,11,31)}));};const url=`https://${storageAccountName}.blob.core.windows.net/${containerName}/water_quality_data.csv?${sasToken}`;fetch(url).then(response=>response.text()).then(csvText=>{Papa.parse(csvText,{header:true,skipEmptyLines:true,complete:result=>{processYearData(result.data);}});}).catch(error=>{console.error(\"Error loading water quality CSV:\",error);});},[onFilterChange,storageAccountName,containerName,sasToken]);// Handle site search.\nconst filteredSites=sites.filter(site=>site.toLowerCase().includes(searchQuery.toLowerCase()));// Handle start/end year changes.\nconst handleStartYearChange=event=>{const newStart=parseInt(event.target.value);if(newStart<=endYear){setStartYear(newStart);onFilterChange(prev=>({...prev,startDate:new Date(newStart,0,1)}));}};const handleEndYearChange=event=>{const newEnd=parseInt(event.target.value);if(newEnd>=startYear){setEndYear(newEnd);onFilterChange(prev=>({...prev,endDate:new Date(newEnd,11,31)}));}};return/*#__PURE__*/_jsxs(\"div\",{className:\"filters\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search sites...\",className:\"search-box\",value:searchQuery,onChange:e=>setSearchQuery(e.target.value)}),/*#__PURE__*/_jsx(\"div\",{className:\"site-list\",children:filteredSites.map(site=>/*#__PURE__*/_jsx(\"div\",{className:`site-item ${selectedSites.includes(site)?\"selected\":\"\"}`,onClick:()=>{const updatedSelection=selectedSites.includes(site)?selectedSites.filter(s=>s!==site):[...selectedSites,site];onFilterChange(prev=>({...prev,selectedSites:updatedSelection}));},children:site},site))})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"filter-separator\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group parameter-filter\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Parameter:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"parameter-options\",children:[\"Total Phosphorous\",\"Secchi\"].map(param=>/*#__PURE__*/_jsxs(\"label\",{className:\"parameter-option\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedParameters.includes(param),onChange:()=>{const updatedParams=selectedParameters.includes(param)?selectedParameters.filter(p=>p!==param):[...selectedParameters,param];setSelectedParameters(updatedParams);onFilterChange(prev=>({...prev,selectedParameters:updatedParams}));}}),param]},param))})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"filter-separator\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Year Range:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"year-dropdowns\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Start Year:\",/*#__PURE__*/_jsx(\"select\",{value:startYear||\"\",onChange:handleStartYearChange,className:\"year-select\",children:availableYears.map(y=>/*#__PURE__*/_jsx(\"option\",{value:y,children:y},y))})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"End Year:\",/*#__PURE__*/_jsx(\"select\",{value:endYear||\"\",onChange:handleEndYearChange,className:\"year-select\",children:availableYears.map(y=>/*#__PURE__*/_jsx(\"option\",{value:y,children:y},y))})]})]})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"filter-separator\"}),/*#__PURE__*/_jsx(\"div\",{className:\"filter-group filter-buttons\",children:/*#__PURE__*/_jsx(\"button\",{className:\"reset-btn\",onClick:()=>{onFilterChange({selectedSites:[],selectedParameters:[],startDate:availableYears.length>0?new Date(Math.min(...availableYears),0,1):new Date(),endDate:availableYears.length>0?new Date(Math.max(...availableYears),11,31):new Date()});},children:\"Reset\"})})]});}export default Filters;","map":{"version":3,"names":["React","useEffect","useState","Papa","jsx","_jsx","jsxs","_jsxs","Filters","_ref","onFilterChange","selectedSites","storageAccountName","sasToken","containerName","sites","setSites","searchQuery","setSearchQuery","selectedParameters","setSelectedParameters","availableYears","setAvailableYears","startYear","setStartYear","endYear","setEndYear","url","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","allSites","data","map","row","name","Location","filter","site","uniqueSites","Set","sort","catch","error","console","processYearData","years","parseInt","Year","y","isNaN","length","uniqueYears","a","b","min","max","prev","startDate","Date","endDate","filteredSites","toLowerCase","includes","handleStartYearChange","event","newStart","target","value","handleEndYearChange","newEnd","className","children","type","placeholder","onChange","e","onClick","updatedSelection","s","param","checked","updatedParams","p","Math"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/client/src/Filters.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\n\r\nfunction Filters({ onFilterChange, selectedSites }) {\r\n  // Page-level configuration variables for Azure Blob Storage.\r\n  const storageAccountName = \"ppastorageaccount159\";\r\n  const sasToken = \"sv=2024-11-04&ss=bfqt&srt=sco&sp=rwd&se=2045-03-20T12:52:05Z&st=2025-03-13T04:52:05Z&spr=https,http&sig=7lAkSTM%2F7Gd4RCmeLiUXqAfNsWYrZx65sJnnrFDAxpo%3D\";\r\n  const containerName = \"nwmiws\";\r\n  \r\n  // State for all available sites (not the selected ones).\r\n  const [sites, setSites] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  // Parameter state\r\n  const [selectedParameters, setSelectedParameters] = useState([]);\r\n\r\n  // Year range state\r\n  const [availableYears, setAvailableYears] = useState([]);\r\n  const [startYear, setStartYear] = useState(null);\r\n  const [endYear, setEndYear] = useState(null);\r\n\r\n  // 1. Load all site names from `locations.csv` from Azure Blob Storage.\r\n  useEffect(() => {\r\n    const url = `https://${storageAccountName}.blob.core.windows.net/${containerName}/locations.csv?${sasToken}`;\r\n    fetch(url)\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            // Assume each row has a \"name\" or \"Location\" field.\r\n            const allSites = result.data\r\n              .map(row => row.name || row.Location)\r\n              .filter(site => site); // Remove empty values.\r\n            // Remove duplicates and sort.\r\n            const uniqueSites = [...new Set(allSites)].sort();\r\n            setSites(uniqueSites);\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error loading locations CSV:\", error);\r\n      });\r\n  }, [storageAccountName, containerName, sasToken]);\r\n\r\n  // 2. Load years from `water_quality_data.csv` from Azure Blob Storage.\r\n  useEffect(() => {\r\n    const processYearData = (data) => {\r\n      const years = data.map(row => parseInt(row.Year)).filter(y => !isNaN(y));\r\n      if (years.length === 0) return;\r\n      \r\n      const uniqueYears = [...new Set(years)].sort((a, b) => a - b);\r\n      const min = uniqueYears[0];\r\n      const max = uniqueYears[uniqueYears.length - 1];\r\n      \r\n      setAvailableYears(uniqueYears);\r\n      setStartYear(min);\r\n      setEndYear(max);\r\n\r\n      onFilterChange(prev => ({\r\n        ...prev,\r\n        startDate: new Date(min, 0, 1),\r\n        endDate: new Date(max, 11, 31),\r\n      }));\r\n    };\r\n\r\n    const url = `https://${storageAccountName}.blob.core.windows.net/${containerName}/water_quality_data.csv?${sasToken}`;\r\n    fetch(url)\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            processYearData(result.data);\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error loading water quality CSV:\", error);\r\n      });\r\n  }, [onFilterChange, storageAccountName, containerName, sasToken]);\r\n\r\n  // Handle site search.\r\n  const filteredSites = sites.filter(site =>\r\n    site.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  // Handle start/end year changes.\r\n  const handleStartYearChange = (event) => {\r\n    const newStart = parseInt(event.target.value);\r\n    if (newStart <= endYear) {\r\n      setStartYear(newStart);\r\n      onFilterChange(prev => ({\r\n        ...prev,\r\n        startDate: new Date(newStart, 0, 1),\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleEndYearChange = (event) => {\r\n    const newEnd = parseInt(event.target.value);\r\n    if (newEnd >= startYear) {\r\n      setEndYear(newEnd);\r\n      onFilterChange(prev => ({\r\n        ...prev,\r\n        endDate: new Date(newEnd, 11, 31),\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"filters\">\r\n      {/* Site Filter */}\r\n      <div className=\"filter-group\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search sites...\"\r\n          className=\"search-box\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n        />\r\n        <div className=\"site-list\">\r\n          {filteredSites.map(site => (\r\n            <div\r\n              key={site}\r\n              className={`site-item ${selectedSites.includes(site) ? \"selected\" : \"\"}`}\r\n              onClick={() => {\r\n                const updatedSelection = selectedSites.includes(site)\r\n                  ? selectedSites.filter(s => s !== site)\r\n                  : [...selectedSites, site];\r\n                onFilterChange(prev => ({ ...prev, selectedSites: updatedSelection }));\r\n              }}\r\n            >\r\n              {site}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <hr className=\"filter-separator\" />\r\n\r\n      {/* Parameter Filter */}\r\n      <div className=\"filter-group parameter-filter\">\r\n        <span>Parameter:</span>\r\n        <div className=\"parameter-options\">\r\n          {[\"Total Phosphorous\", \"Secchi\"].map(param => (\r\n            <label key={param} className=\"parameter-option\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedParameters.includes(param)}\r\n                onChange={() => {\r\n                  const updatedParams = selectedParameters.includes(param)\r\n                    ? selectedParameters.filter(p => p !== param)\r\n                    : [...selectedParameters, param];\r\n                  setSelectedParameters(updatedParams);\r\n                  onFilterChange(prev => ({ ...prev, selectedParameters: updatedParams }));\r\n                }}\r\n              />\r\n              {param}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <hr className=\"filter-separator\" />\r\n\r\n      {/* Year Range Dropdowns */}\r\n      <div className=\"filter-group\">\r\n        <span>Year Range:</span>\r\n        <div className=\"year-dropdowns\">\r\n          <label>\r\n            Start Year:\r\n            <select\r\n              value={startYear || \"\"}\r\n              onChange={handleStartYearChange}\r\n              className=\"year-select\"\r\n            >\r\n              {availableYears.map(y => (\r\n                <option key={y} value={y}>{y}</option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          <label>\r\n            End Year:\r\n            <select\r\n              value={endYear || \"\"}\r\n              onChange={handleEndYearChange}\r\n              className=\"year-select\"\r\n            >\r\n              {availableYears.map(y => (\r\n                <option key={y} value={y}>{y}</option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <hr className=\"filter-separator\" />\r\n\r\n      {/* Reset Button */}\r\n      <div className=\"filter-group filter-buttons\">\r\n        <button\r\n          className=\"reset-btn\"\r\n          onClick={() => {\r\n            onFilterChange({\r\n              selectedSites: [],\r\n              selectedParameters: [],\r\n              startDate: availableYears.length > 0 ? new Date(Math.min(...availableYears), 0, 1) : new Date(),\r\n              endDate: availableYears.length > 0 ? new Date(Math.max(...availableYears), 11, 31) : new Date(),\r\n            });\r\n          }}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}