{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport * as base64 from \"./base64.js\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\nclass SerializerImpl {\n  constructor() {\n    let modelMappers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let isXML = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.modelMappers = modelMappers;\n    this.isXML = isXML;\n  }\n  /**\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper, value, objectName) {\n    const failValidation = (constraintName, constraintValue) => {\n      throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n    };\n    if (mapper.constraints && value !== undefined && value !== null) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems\n      } = mapper.constraints;\n      if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems !== undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength !== undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems !== undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength !== undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (UniqueItems && value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param object - A valid Javascript object to be serialized\n   *\n   * @param objectName - Name of the serialized object\n   *\n   * @param options - additional options to serialization\n   *\n   * @returns A valid serialized Javascript object\n   */\n  serialize(mapper, object, objectName) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      xml: {}\n    };\n    var _a, _b, _c;\n    const updatedOptions = {\n      xml: {\n        rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n        includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n        xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n      }\n    };\n    let payload = {};\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n    const {\n      required,\n      nullable\n    } = mapper;\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && (object === undefined || object === null)) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n    if (object === undefined || object === null) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper = mapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n      }\n    }\n    return payload;\n  }\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param responseBody - A valid Javascript entity to be deserialized\n   *\n   * @param objectName - Name of the deserialized object\n   *\n   * @param options - Controls behavior of XML parser and builder.\n   *\n   * @returns A valid deserialized Javascript object\n   */\n  deserialize(mapper, responseBody, objectName) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      xml: {}\n    };\n    var _a, _b, _c, _d;\n    const updatedOptions = {\n      xml: {\n        rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n        includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n        xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n      },\n      ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false\n    };\n    if (responseBody === undefined || responseBody === null) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n    let payload;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName;\n    }\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xml.xmlCharKey;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n          responseBody = responseBody[xmlCharKey];\n        }\n      }\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n      }\n    }\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n    return payload;\n  }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer() {\n  let modelMappers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let isXML = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n  const classes = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n  return classes;\n}\nfunction dateToUnixTime(d) {\n  if (!d) {\n    return undefined;\n  }\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d);\n  }\n  return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (objectType !== \"string\" && typeof value.pipe !== \"function\" &&\n      // NodeJS.ReadableStream\n      typeof value.tee !== \"function\" &&\n      // browser ReadableStream\n      !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) &&\n      // File objects count as a type of Blob, so we want to use instanceof explicitly\n      !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) && objectType !== \"function\") {\n        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n      }\n    }\n  }\n  return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n  if (!allowedValues) {\n    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n  }\n  const isPresent = allowedValues.some(item => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n  }\n  return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n  if (value !== undefined && value !== null) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!isDuration(value)) {\n        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n      }\n    }\n  }\n  return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n  var _a;\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  let elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  // Quirk: Composite mappers referenced by `element` might\n  // not have *all* properties declared (like uberParent),\n  // so let's try to look up the full definition by name.\n  if (elementType.type.name === \"Composite\" && elementType.type.className) {\n    elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = Object.assign({}, serializedValue);\n        tempArray[i][XML_ATTRKEY] = {\n          [xmlnsKey]: elementType.xmlNamespace\n        };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xml.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = {\n          [xmlnsKey]: elementType.xmlNamespace\n        };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n  }\n  const tempDictionary = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = {\n      [xmlnsKey]: mapper.xmlNamespace\n    };\n    return result;\n  }\n  return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n  const additionalProperties = mapper.type.additionalProperties;\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n  }\n  return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n  }\n  return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n    }\n  }\n  return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n  if (object !== undefined && object !== null) {\n    const payload = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n      let propName;\n      let parentObject = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName);\n        propName = paths.pop();\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if ((childObject === undefined || childObject === null) && (object[key] !== undefined && object[key] !== null || propertyMapper.defaultValue !== undefined)) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n      if (parentObject !== undefined && parentObject !== null) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n          parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), {\n            [xmlnsKey]: mapper.xmlNamespace\n          });\n        }\n        const propertyObjectName = propertyMapper.serializedName !== \"\" ? objectName + \".\" + propertyMapper.serializedName : objectName;\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === undefined || toSerialize === null)) {\n          toSerialize = mapper.serializedName;\n        }\n        const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n        if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = {\n              [propertyMapper.xmlElementName]: value\n            };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every(pn => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n        }\n      }\n    }\n    return payload;\n  }\n  return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : \"xmlns\";\n  const xmlNamespace = {\n    [xmlnsKey]: propertyMapper.xmlNamespace\n  };\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result = Object.assign({}, serializedValue);\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result = {};\n  result[options.xml.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n  return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n  var _a, _b;\n  const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance = {};\n  const handledPropertyNames = [];\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName);\n    handledPropertyNames.push(paths[0]);\n    const {\n      serializedName,\n      xmlName,\n      xmlElementName\n    } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n        }\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName];\n          const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n          instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n          handledPropertyNames.push(xmlName);\n        } else {\n          const property = responseBody[propertyName];\n          instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n          handledPropertyNames.push(propertyName);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      let steps = 0;\n      for (const item of paths) {\n        if (!res) break;\n        steps++;\n        res = res[item];\n      }\n      // only accept null when reaching the last position of object otherwise it would be undefined\n      if (res === null && steps < paths.length) {\n        res = undefined;\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === undefined || propertyInstance === null)) {\n        propertyInstance = mapper.serializedName;\n      }\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n        instance[key] = serializedValue;\n      }\n    }\n  }\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = responsePropName => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n      }\n    }\n  } else if (responseBody && !options.ignoreUnknownProperties) {\n    for (const key of Object.keys(responseBody)) {\n      if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n  return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n  /* jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    const tempDictionary = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n  var _a;\n  let element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (element.type.name === \"Composite\" && element.type.className) {\n      element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n    }\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n  const typeNamesToCheck = [typeName];\n  while (typeNamesToCheck.length) {\n    const currentName = typeNamesToCheck.shift();\n    const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + \".\" + discriminatorValue;\n    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n      return discriminators[indexDiscriminator];\n    } else {\n      for (const [name, mapper] of Object.entries(discriminators)) {\n        if (name.startsWith(currentName + \".\") && mapper.type.uberParent === currentName && mapper.type.className) {\n          typeNamesToCheck.push(mapper.type.className);\n        }\n      }\n    }\n  }\n  return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n  var _a;\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n  if (polymorphicDiscriminator) {\n    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName) {\n      // The serializedName might have \\\\, which we just want to ignore\n      if (polymorphicPropertyName === \"serializedName\") {\n        discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n      }\n      const discriminatorValue = object[discriminatorName];\n      const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n      if (typeof discriminatorValue === \"string\" && typeName) {\n        const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n  return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;\n}\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n  Base64Url: \"Base64Url\",\n  Boolean: \"Boolean\",\n  ByteArray: \"ByteArray\",\n  Composite: \"Composite\",\n  Date: \"Date\",\n  DateTime: \"DateTime\",\n  DateTimeRfc1123: \"DateTimeRfc1123\",\n  Dictionary: \"Dictionary\",\n  Enum: \"Enum\",\n  Number: \"Number\",\n  Object: \"Object\",\n  Sequence: \"Sequence\",\n  String: \"String\",\n  Stream: \"Stream\",\n  TimeSpan: \"TimeSpan\",\n  UnixTime: \"UnixTime\"\n};","map":{"version":3,"names":["base64","XML_ATTRKEY","XML_CHARKEY","isDuration","isValidUuid","SerializerImpl","constructor","modelMappers","arguments","length","undefined","isXML","validateConstraints","mapper","value","objectName","failValidation","constraintName","constraintValue","Error","constraints","ExclusiveMaximum","ExclusiveMinimum","InclusiveMaximum","InclusiveMinimum","MaxItems","MaxLength","MinItems","MinLength","MultipleOf","Pattern","UniqueItems","pattern","RegExp","match","some","item","i","ar","indexOf","serialize","object","options","xml","updatedOptions","rootName","_a","includeRoot","_b","xmlCharKey","_c","payload","mapperType","type","name","serializedName","isConstant","defaultValue","required","nullable","serializeBasicTypes","enumMapper","serializeEnumType","allowedValues","serializeDateTypes","serializeByteArrayType","serializeBase64UrlType","serializeSequenceType","Boolean","serializeDictionaryType","serializeCompositeType","deserialize","responseBody","ignoreUnknownProperties","_d","xmlIsWrapped","deserializeCompositeType","parseFloat","isNaN","Date","unixTimeToDate","decodeString","base64UrlToByteArray","deserializeSequenceType","deserializeDictionaryType","createSerializer","trimEnd","str","ch","len","substr","bufferToBase64Url","buffer","Uint8Array","encodeByteArray","replace","valueOf","splitSerializeName","prop","classes","partialclass","subwords","split","charAt","push","dateToUnixTime","d","Math","floor","getTime","n","typeName","objectType","pipe","tee","ArrayBuffer","isView","Blob","isPresent","toLowerCase","JSON","stringify","parse","toISOString","substring","toUTCString","serializer","isXml","Array","isArray","elementType","element","className","tempArray","serializedValue","xmlNamespace","xmlnsKey","xmlNamespacePrefix","Object","assign","valueType","tempDictionary","key","keys","getXmlObjectValue","result","resolveAdditionalProperties","additionalProperties","modelMapper","resolveReferencedMapper","resolveModelProperties","modelProps","modelProperties","getPolymorphicDiscriminatorRecursively","getPolymorphicMapper","propertyMapper","readOnly","propName","parentObject","xmlName","xmlElementName","paths","pop","pathName","childObject","propertyObjectName","toSerialize","polymorphicDiscriminator","clientName","xmlIsAttribute","additionalPropertiesMapper","propNames","clientPropName","isAdditionalProperty","every","pn","includes","isSpecialXmlProperty","propertyName","instance","handledPropertyNames","headerCollectionPrefix","dictionary","headerKey","startsWith","xmlIsMsText","wrapped","elementList","property","propertyInstance","res","steps","arrayInstance","k","v","entries","prototype","hasOwnProperty","call","responsePropName","getIndexDiscriminator","discriminators","discriminatorValue","typeNamesToCheck","currentName","shift","indexDiscriminator","uberParent","polymorphicPropertyName","discriminatorName","polymorphicMapper","getPolymorphicDiscriminatorSafely","MapperTypeNames","Base64Url","ByteArray","Composite","DateTime","DateTimeRfc1123","Dictionary","Enum","Number","Sequence","String","Stream","TimeSpan","UnixTime"],"sources":["C:\\Users\\rdpro\\Projects\\NW Michigan Watershed Coalition\\client\\node_modules\\@azure\\core-client\\src\\serializer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport * as base64 from \"./base64.js\";\nimport type {\n  BaseMapper,\n  CompositeMapper,\n  DictionaryMapper,\n  EnumMapper,\n  Mapper,\n  MapperConstraints,\n  PolymorphicDiscriminator,\n  RequiredSerializerOptions,\n  SequenceMapper,\n  Serializer,\n  SerializerOptions,\n} from \"./interfaces.js\";\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\n\nclass SerializerImpl implements Serializer {\n  constructor(\n    public readonly modelMappers: { [key: string]: any } = {},\n    public readonly isXML: boolean = false,\n  ) {}\n\n  /**\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (\n      constraintName: keyof MapperConstraints,\n      constraintValue: any,\n    ): never => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`,\n      );\n    };\n    if (mapper.constraints && value !== undefined && value !== null) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems,\n      } = mapper.constraints;\n      if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems !== undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength !== undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems !== undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength !== undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param object - A valid Javascript object to be serialized\n   *\n   * @param objectName - Name of the serialized object\n   *\n   * @param options - additional options to serialization\n   *\n   * @returns A valid serialized Javascript object\n   */\n  serialize(\n    mapper: Mapper,\n    object: any,\n    objectName?: string,\n    options: SerializerOptions = { xml: {} },\n  ): any {\n    const updatedOptions: RequiredSerializerOptions = {\n      xml: {\n        rootName: options.xml.rootName ?? \"\",\n        includeRoot: options.xml.includeRoot ?? false,\n        xmlCharKey: options.xml.xmlCharKey ?? XML_CHARKEY,\n      },\n    };\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && (object === undefined || object === null)) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object === undefined || object === null) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(\n          this,\n          mapper as CompositeMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param responseBody - A valid Javascript entity to be deserialized\n   *\n   * @param objectName - Name of the deserialized object\n   *\n   * @param options - Controls behavior of XML parser and builder.\n   *\n   * @returns A valid deserialized Javascript object\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: any,\n    objectName: string,\n    options: SerializerOptions = { xml: {} },\n  ): any {\n    const updatedOptions: RequiredSerializerOptions = {\n      xml: {\n        rootName: options.xml.rootName ?? \"\",\n        includeRoot: options.xml.includeRoot ?? false,\n        xmlCharKey: options.xml.xmlCharKey ?? XML_CHARKEY,\n      },\n      ignoreUnknownProperties: options.ignoreUnknownProperties ?? false,\n    };\n    if (responseBody === undefined || responseBody === null) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(\n        this,\n        mapper as CompositeMapper,\n        responseBody,\n        objectName,\n        updatedOptions,\n      );\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xml.xmlCharKey;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n          responseBody = responseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          responseBody,\n          objectName,\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName,\n          updatedOptions,\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(\n  modelMappers: { [key: string]: any } = {},\n  isXML: boolean = false,\n): Serializer {\n  return new SerializerImpl(modelMappers, isXML);\n}\n\nfunction trimEnd(str: string, ch: string): string {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: Uint8Array): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`,\n        );\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n        typeof value.tee !== \"function\" && // browser ReadableStream\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        // File objects count as a type of Blob, so we want to use instanceof explicitly\n        !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n        objectType !== \"function\"\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`,\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`,\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues,\n      )}.`,\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string): any {\n  if (value !== undefined && value !== null) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`,\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`,\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  let elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`,\n    );\n  }\n  // Quirk: Composite mappers referenced by `element` might\n  // not have *all* properties declared (like uberParent),\n  // so let's try to look up the full definition by name.\n  if (elementType.type.name === \"Composite\" && elementType.type.className) {\n    elementType = serializer.modelMappers[elementType.type.className] ?? elementType;\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix\n        ? `xmlns:${elementType.xmlNamespacePrefix}`\n        : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = { ...serializedValue };\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xml.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`,\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n    return result;\n  }\n\n  return tempDictionary;\n}\n\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): SequenceMapper | BaseMapper | CompositeMapper | DictionaryMapper | EnumMapper | undefined {\n  const additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper?.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): CompositeMapper | undefined {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(\n      `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n        mapper,\n        undefined,\n        2,\n      )}\".`,\n    );\n  }\n\n  return serializer.modelMappers[className];\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper?.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(modelMapper)}\" of type \"${\n            mapper.type.className\n          }\" for object \"${objectName}\".`,\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object !== undefined && object !== null) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (\n            (childObject === undefined || childObject === null) &&\n            ((object[key] !== undefined && object[key] !== null) ||\n              propertyMapper.defaultValue !== undefined)\n          ) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject !== undefined && parentObject !== null) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix\n            ? `xmlns:${mapper.xmlNamespacePrefix}`\n            : \"xmlns\";\n          parentObject[XML_ATTRKEY] = {\n            ...parentObject[XML_ATTRKEY],\n            [xmlnsKey]: mapper.xmlNamespace,\n          };\n        }\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          (toSerialize === undefined || toSerialize === null)\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName,\n          options,\n        );\n        if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: value };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]',\n            options,\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction getXmlObjectValue(\n  propertyMapper: Mapper,\n  serializedValue: any,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix\n    ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n    : \"xmlns\";\n  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result: any = { ...serializedValue };\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result: any = {};\n  result[options.xml.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName: string, options: RequiredSerializerOptions): boolean {\n  return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  const xmlCharKey = options.xml.xmlCharKey ?? XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName,\n            options,\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody[XML_ATTRKEY][xmlName!],\n          propertyObjectName,\n          options,\n        );\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName!];\n          const elementList = wrapped?.[xmlElementName!] ?? [];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            elementList,\n            propertyObjectName,\n            options,\n          );\n          handledPropertyNames.push(xmlName!);\n        } else {\n          const property = responseBody[propertyName!];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            property,\n            propertyObjectName,\n            options,\n          );\n          handledPropertyNames.push(propertyName!);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      let steps = 0;\n      for (const item of paths) {\n        if (!res) break;\n        steps++;\n        res = res[item];\n      }\n      // only accept null when reaching the last position of object otherwise it would be undefined\n      if (res === null && steps < paths.length) {\n        res = undefined;\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        (propertyInstance === undefined || propertyInstance === null)\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options,\n        );\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options,\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string): boolean => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]',\n          options,\n        );\n      }\n    }\n  } else if (responseBody && !options.ignoreUnknownProperties) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key, options)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  /* jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`,\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  let element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`,\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (element.type.name === \"Composite\" && element.type.className) {\n      element = serializer.modelMappers[element.type.className] ?? element;\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(\n        element,\n        responseBody[i],\n        `${objectName}[${i}]`,\n        options,\n      );\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getIndexDiscriminator(\n  discriminators: Record<string, CompositeMapper>,\n  discriminatorValue: string,\n  typeName: string,\n): CompositeMapper | undefined {\n  const typeNamesToCheck = [typeName];\n  while (typeNamesToCheck.length) {\n    const currentName = typeNamesToCheck.shift();\n    const indexDiscriminator =\n      discriminatorValue === currentName\n        ? discriminatorValue\n        : currentName + \".\" + discriminatorValue;\n    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n      return discriminators[indexDiscriminator];\n    } else {\n      for (const [name, mapper] of Object.entries(discriminators)) {\n        if (\n          name.startsWith(currentName + \".\") &&\n          mapper.type.uberParent === currentName &&\n          mapper.type.className\n        ) {\n          typeNamesToCheck.push(mapper.type.className);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\",\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n\n  if (polymorphicDiscriminator) {\n    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName) {\n      // The serializedName might have \\\\, which we just want to ignore\n      if (polymorphicPropertyName === \"serializedName\") {\n        discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n      }\n      const discriminatorValue = object[discriminatorName];\n      const typeName = mapper.type.uberParent ?? mapper.type.className;\n\n      if (typeof discriminatorValue === \"string\" && typeName) {\n        const polymorphicMapper = getIndexDiscriminator(\n          serializer.modelMappers.discriminators,\n          discriminatorValue,\n          typeName,\n        );\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(\n  serializer: Serializer,\n  typeName?: string,\n): PolymorphicDiscriminator | undefined {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n  Base64Url: \"Base64Url\",\n  Boolean: \"Boolean\",\n  ByteArray: \"ByteArray\",\n  Composite: \"Composite\",\n  Date: \"Date\",\n  DateTime: \"DateTime\",\n  DateTimeRfc1123: \"DateTimeRfc1123\",\n  Dictionary: \"Dictionary\",\n  Enum: \"Enum\",\n  Number: \"Number\",\n  Object: \"Object\",\n  Sequence: \"Sequence\",\n  String: \"String\",\n  Stream: \"Stream\",\n  TimeSpan: \"TimeSpan\",\n  UnixTime: \"UnixTime\",\n} as const;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}