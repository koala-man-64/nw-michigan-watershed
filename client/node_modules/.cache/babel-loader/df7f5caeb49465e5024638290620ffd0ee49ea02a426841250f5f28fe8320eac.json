{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isObject } from \"@azure/core-util\";\nconst RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\"x-ms-client-request-id\", \"x-ms-return-client-request-id\", \"x-ms-useragent\", \"x-ms-correlation-request-id\", \"x-ms-request-id\", \"client-request-id\", \"ms-cv\", \"return-client-request-id\", \"traceparent\", \"Access-Control-Allow-Credentials\", \"Access-Control-Allow-Headers\", \"Access-Control-Allow-Methods\", \"Access-Control-Allow-Origin\", \"Access-Control-Expose-Headers\", \"Access-Control-Max-Age\", \"Access-Control-Request-Headers\", \"Access-Control-Request-Method\", \"Origin\", \"Accept\", \"Accept-Encoding\", \"Cache-Control\", \"Connection\", \"Content-Length\", \"Content-Type\", \"Date\", \"ETag\", \"Expires\", \"If-Match\", \"If-Modified-Since\", \"If-None-Match\", \"If-Unmodified-Since\", \"Last-Modified\", \"Pragma\", \"Request-Id\", \"Retry-After\", \"Server\", \"Transfer-Encoding\", \"User-Agent\", \"WWW-Authenticate\"];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nexport class Sanitizer {\n  constructor() {\n    let {\n      additionalAllowedHeaderNames: allowedHeaderNames = [],\n      additionalAllowedQueryParameters: allowedQueryParameters = []\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map(n => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map(p => p.toLowerCase()));\n  }\n  sanitize(obj) {\n    const seen = new Set();\n    return JSON.stringify(obj, (key, value) => {\n      // Ensure Errors include their interesting non-enumerable members\n      if (value instanceof Error) {\n        return Object.assign(Object.assign({}, value), {\n          name: value.name,\n          message: value.message\n        });\n      }\n      if (key === \"headers\") {\n        return this.sanitizeHeaders(value);\n      } else if (key === \"url\") {\n        return this.sanitizeUrl(value);\n      } else if (key === \"query\") {\n        return this.sanitizeQuery(value);\n      } else if (key === \"body\") {\n        // Don't log the request body\n        return undefined;\n      } else if (key === \"response\") {\n        // Don't log response again\n        return undefined;\n      } else if (key === \"operationSpec\") {\n        // When using sendOperationRequest, the request carries a massive\n        // field with the autorest spec. No need to log it.\n        return undefined;\n      } else if (Array.isArray(value) || isObject(value)) {\n        if (seen.has(value)) {\n          return \"[Circular]\";\n        }\n        seen.add(value);\n      }\n      return value;\n    }, 2);\n  }\n  sanitizeUrl(value) {\n    if (typeof value !== \"string\" || value === null || value === \"\") {\n      return value;\n    }\n    const url = new URL(value);\n    if (!url.search) {\n      return value;\n    }\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n    return url.toString();\n  }\n  sanitizeHeaders(obj) {\n    const sanitized = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n  sanitizeQuery(value) {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n    const sanitized = {};\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n}","map":{"version":3,"names":["isObject","RedactedString","defaultAllowedHeaderNames","defaultAllowedQueryParameters","Sanitizer","constructor","additionalAllowedHeaderNames","allowedHeaderNames","additionalAllowedQueryParameters","allowedQueryParameters","arguments","length","undefined","concat","Set","map","n","toLowerCase","p","sanitize","obj","seen","JSON","stringify","key","value","Error","Object","assign","name","message","sanitizeHeaders","sanitizeUrl","sanitizeQuery","Array","isArray","has","add","url","URL","search","searchParams","set","toString","sanitized","keys","k"],"sources":["C:\\Users\\rdpro\\Projects\\NW Michigan Watershed Coalition\\client\\node_modules\\@azure\\core-rest-pipeline\\src\\util\\sanitizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { type UnknownObject, isObject } from \"@azure/core-util\";\n\n/**\n * @internal\n */\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\n/**\n * @internal\n */\nexport class Sanitizer {\n  private allowedHeaderNames: Set<string>;\n  private allowedQueryParameters: Set<string>;\n\n  constructor({\n    additionalAllowedHeaderNames: allowedHeaderNames = [],\n    additionalAllowedQueryParameters: allowedQueryParameters = [],\n  }: SanitizerOptions = {}) {\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"headers\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2,\n    );\n  }\n\n  public sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null || value === \"\") {\n      return value;\n    }\n\n    const url = new URL(value);\n\n    if (!url.search) {\n      return value;\n    }\n\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n\n    return url.toString();\n  }\n\n  private sanitizeHeaders(obj: UnknownObject): UnknownObject {\n    const sanitized: UnknownObject = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}