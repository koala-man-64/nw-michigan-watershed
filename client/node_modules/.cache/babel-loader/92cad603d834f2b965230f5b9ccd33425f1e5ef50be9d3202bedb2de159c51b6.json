{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\MapPanel.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport Papa from 'papaparse';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix default icon issue in Leaflet with Webpack\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// Component to set initial bounds when map is created\nfunction SetMapBounds({\n  bounds\n}) {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    if (bounds.isValid()) {\n      map.fitBounds(bounds, {\n        padding: [20, 20]\n      });\n    }\n    // Run only once at mount time\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, bounds]);\n  return null;\n}\n_s(SetMapBounds, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = SetMapBounds;\nfunction MapPanel({\n  selectedSites\n}) {\n  _s2();\n  const [allLocations, setAllLocations] = useState([]);\n\n  // Azure Blob Storage configuration variables\n  const storageAccountName = \"ppastorageaccount159\";\n  const sasToken = \"sv=2024-11-04&ss=bfqt&srt=sco&sp=rwd&se=2045-03-20T12:52:05Z&st=2025-03-13T04:52:05Z&spr=https,http&sig=7lAkSTM%2F7Gd4RCmeLiUXqAfNsWYrZx65sJnnrFDAxpo%3D\";\n  const containerName = \"nwmiws\";\n\n  // Load all locations from locations.csv in Azure Blob Storage on mount.\n  useEffect(() => {\n    const url = `https://${storageAccountName}.blob.core.windows.net/${containerName}/locations.csv?${sasToken}`;\n    fetch(url).then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          // Assume CSV has columns: id, name, latitude, longitude (adjust field names if needed)\n          const locations = result.data.map(row => ({\n            name: row.name || row.Location,\n            lat: parseFloat(row.latitude) || parseFloat(row.Latitude),\n            lng: parseFloat(row.longitude) || parseFloat(row.Longitude)\n          })).filter(loc => !isNaN(loc.lat) && !isNaN(loc.lng));\n          setAllLocations(locations);\n        }\n      });\n    }).catch(error => {\n      console.error(\"Error loading locations CSV:\", error);\n    });\n  }, [storageAccountName, containerName, sasToken]);\n\n  // Calculate bounds to cover all locations.\n  const bounds = L.latLngBounds(allLocations.map(loc => [loc.lat, loc.lng]));\n\n  // Filter locations that are selected (based on name)\n  const selectedLocations = allLocations.filter(loc => selectedSites.includes(loc.name));\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    scrollWheelZoom: true,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 OpenStreetMap contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), allLocations.length > 0 && /*#__PURE__*/_jsxDEV(SetMapBounds, {\n      bounds: bounds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 35\n    }, this), selectedLocations.map((loc, index) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [loc.lat, loc.lng],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: loc.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s2(MapPanel, \"A3MHoSI3qLTCds3Vbt2aE42N2y8=\");\n_c2 = MapPanel;\nexport default MapPanel;\nvar _c, _c2;\n$RefreshReg$(_c, \"SetMapBounds\");\n$RefreshReg$(_c2, \"MapPanel\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","useMap","L","Papa","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","SetMapBounds","bounds","_s","map","isValid","fitBounds","padding","_c","MapPanel","selectedSites","_s2","allLocations","setAllLocations","storageAccountName","sasToken","containerName","url","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","locations","data","row","name","Location","lat","parseFloat","latitude","Latitude","lng","longitude","Longitude","filter","loc","isNaN","catch","error","console","latLngBounds","selectedLocations","includes","style","height","width","scrollWheelZoom","children","attribution","fileName","_jsxFileName","lineNumber","columnNumber","length","index","position","_c2","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/MapPanel.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport Papa from 'papaparse';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\n// Fix default icon issue in Leaflet with Webpack\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n});\r\n\r\n// Component to set initial bounds when map is created\r\nfunction SetMapBounds({ bounds }) {\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    if (bounds.isValid()) {\r\n      map.fitBounds(bounds, { padding: [20, 20] });\r\n    }\r\n    // Run only once at mount time\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [map, bounds]);\r\n  return null;\r\n}\r\n\r\nfunction MapPanel({ selectedSites }) {\r\n  const [allLocations, setAllLocations] = useState([]);\r\n\r\n  // Azure Blob Storage configuration variables\r\n  const storageAccountName = \"ppastorageaccount159\";\r\n  const sasToken = \"sv=2024-11-04&ss=bfqt&srt=sco&sp=rwd&se=2045-03-20T12:52:05Z&st=2025-03-13T04:52:05Z&spr=https,http&sig=7lAkSTM%2F7Gd4RCmeLiUXqAfNsWYrZx65sJnnrFDAxpo%3D\";\r\n  const containerName = \"nwmiws\";\r\n  \r\n  // Load all locations from locations.csv in Azure Blob Storage on mount.\r\n  useEffect(() => {\r\n    const url = `https://${storageAccountName}.blob.core.windows.net/${containerName}/locations.csv?${sasToken}`;\r\n    fetch(url)\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            // Assume CSV has columns: id, name, latitude, longitude (adjust field names if needed)\r\n            const locations = result.data.map(row => ({\r\n              name: row.name || row.Location, \r\n              lat: parseFloat(row.latitude) || parseFloat(row.Latitude),\r\n              lng: parseFloat(row.longitude) || parseFloat(row.Longitude)\r\n            })).filter(loc => !isNaN(loc.lat) && !isNaN(loc.lng));\r\n            setAllLocations(locations);\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error loading locations CSV:\", error);\r\n      });\r\n  }, [storageAccountName, containerName, sasToken]);\r\n\r\n  // Calculate bounds to cover all locations.\r\n  const bounds = L.latLngBounds(allLocations.map(loc => [loc.lat, loc.lng]));\r\n\r\n  // Filter locations that are selected (based on name)\r\n  const selectedLocations = allLocations.filter(loc => selectedSites.includes(loc.name));\r\n\r\n  return (\r\n    <MapContainer style={{ height: '100%', width: '100%' }} scrollWheelZoom={true}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"&copy; OpenStreetMap contributors\"\r\n      />\r\n      {allLocations.length > 0 && <SetMapBounds bounds={bounds} />}\r\n      {selectedLocations.map((loc, index) => (\r\n        <Marker key={index} position={[loc.lat, loc.lng]}>\r\n          <Popup>{loc.name}</Popup>\r\n        </Marker>\r\n      ))}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default MapPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}