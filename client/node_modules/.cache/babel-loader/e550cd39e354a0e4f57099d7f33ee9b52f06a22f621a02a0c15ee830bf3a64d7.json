{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\client\\\\src\\\\Plots.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Chart, registerables } from \"chart.js\";\nimport Papa from \"papaparse\";\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\n\n// Default color palette: professional grey and blue tones.\nconst defaultColors = [\"#37474F\", \"#5BC0DE\", \"#6C757D\", \"#ADB5BD\", \"#007BFF\"];\n\n// Chart Configuration\nconst chartConfig = {\n  \"Total Phosphorous\": {\n    type: \"line\",\n    title: \"Total Phosphorus Trend Chart\",\n    yLabel: \"Total P (mg/m3)\"\n  },\n  \"Secchi\": {\n    type: \"bar\",\n    title: \"Secchi Comparison Chart\",\n    yLabel: \"Secchi (feet)\"\n  }\n};\nfunction Plots({\n  selectedParameters,\n  selectedSites,\n  startDate,\n  endDate\n}) {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (selectedParameters.length === 0 || selectedSites.length === 0) {\n      setChartData({}); // Clear chart data if no selections\n      return;\n    }\n    setLoading(true);\n    console.log(\"Fetching water quality data...\");\n\n    // Moved processData inside the effect to avoid dependency issues.\n    const processData = data => {\n      const formattedData = {};\n      selectedParameters.forEach(parameter => {\n        const config = chartConfig[parameter];\n        if (!config) return;\n\n        // Filter rows based on selected sites and date range\n        let filteredData = data.filter(row => row.Parameter === parameter && selectedSites.includes(row.Location) && parseInt(row.Year) >= startDate.getFullYear() && parseInt(row.Year) <= endDate.getFullYear());\n        filteredData.sort((a, b) => parseInt(a.Year) - parseInt(b.Year)); // Sort by year\n\n        if (filteredData.length === 0) {\n          formattedData[parameter] = {\n            labels: [],\n            datasets: []\n          };\n        } else if (config.type === \"line\") {\n          formattedData[parameter] = {\n            labels: [...new Set(filteredData.map(row => row.Year))],\n            datasets: selectedSites.map((site, idx) => {\n              const siteData = filteredData.filter(row => row.Location === site);\n              return {\n                label: site,\n                data: siteData.map(row => parseFloat(row.Value)),\n                borderColor: defaultColors[idx % defaultColors.length],\n                backgroundColor: defaultColors[idx % defaultColors.length],\n                fill: false,\n                tension: 0.1\n              };\n            }).filter(dataset => dataset.data.length > 0)\n          };\n        } else if (config.type === \"bar\") {\n          const uniqueLocations = [...new Set(filteredData.map(row => row.Location))];\n          formattedData[parameter] = {\n            labels: uniqueLocations,\n            datasets: [{\n              label: parameter,\n              data: filteredData.map(row => parseFloat(row.Value)),\n              backgroundColor: uniqueLocations.map((_, idx) => defaultColors[idx % defaultColors.length])\n            }]\n          };\n        }\n      });\n      console.log(\"Formatted Chart Data:\", formattedData);\n      setChartData(formattedData);\n      setLoading(false);\n    };\n    fetch(\"/water_quality_data.csv\").then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          console.log(\"CSV Data Parsed:\", result.data);\n          processData(result.data);\n        }\n      });\n    }).catch(error => {\n      console.error(\"Error fetching CSV:\", error);\n      setLoading(false);\n    });\n  }, [selectedParameters, selectedSites, startDate, endDate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plots-container\",\n    children: selectedParameters.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-plot-message\",\n      children: \"Select a parameter to display plots.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this) : selectedParameters.map((param, index) => {\n      var _chartConfig$param, _chartConfig$param2, _chartConfig$param3, _chartConfig$param4, _chartConfig$param5;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: ((_chartConfig$param = chartConfig[param]) === null || _chartConfig$param === void 0 ? void 0 : _chartConfig$param.title) || param\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plot-content\",\n          children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this) : chartData[param] && chartData[param].labels.length > 0 ? ((_chartConfig$param2 = chartConfig[param]) === null || _chartConfig$param2 === void 0 ? void 0 : _chartConfig$param2.type) === \"line\" ? /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              // Always disable to prevent stretching\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param3 = chartConfig[param]) === null || _chartConfig$param3 === void 0 ? void 0 : _chartConfig$param3.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 19\n          }, this) : ((_chartConfig$param4 = chartConfig[param]) === null || _chartConfig$param4 === void 0 ? void 0 : _chartConfig$param4.type) === \"bar\" ? /*#__PURE__*/_jsxDEV(Bar, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              // Always disable to prevent stretching\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param5 = chartConfig[param]) === null || _chartConfig$param5 === void 0 ? void 0 : _chartConfig$param5.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No chart available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No Data Available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Plots, \"FGY2zWDMlt1Prhz0oPNqH6EfOdA=\");\n_c = Plots;\nexport default Plots;\nvar _c;\n$RefreshReg$(_c, \"Plots\");","map":{"version":3,"names":["React","useEffect","useState","Line","Bar","Chart","registerables","Papa","jsxDEV","_jsxDEV","register","defaultColors","chartConfig","type","title","yLabel","Plots","selectedParameters","selectedSites","startDate","endDate","_s","chartData","setChartData","loading","setLoading","length","console","log","processData","data","formattedData","forEach","parameter","config","filteredData","filter","row","Parameter","includes","Location","parseInt","Year","getFullYear","sort","a","b","labels","datasets","Set","map","site","idx","siteData","label","parseFloat","Value","borderColor","backgroundColor","fill","tension","dataset","uniqueLocations","_","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","param","index","_chartConfig$param","_chartConfig$param2","_chartConfig$param3","_chartConfig$param4","_chartConfig$param5","options","responsive","maintainAspectRatio","scales","y","display","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/client/src/Plots.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\n// Register Chart.js components\r\nChart.register(...registerables);\r\n\r\n// Default color palette: professional grey and blue tones.\r\nconst defaultColors = [\"#37474F\", \"#5BC0DE\", \"#6C757D\", \"#ADB5BD\", \"#007BFF\"];\r\n\r\n// Chart Configuration\r\nconst chartConfig = {\r\n  \"Total Phosphorous\": {\r\n    type: \"line\",\r\n    title: \"Total Phosphorus Trend Chart\",\r\n    yLabel: \"Total P (mg/m3)\"\r\n  },\r\n  \"Secchi\": {\r\n    type: \"bar\",\r\n    title: \"Secchi Comparison Chart\",\r\n    yLabel: \"Secchi (feet)\"\r\n  }\r\n};\r\n\r\nfunction Plots({ selectedParameters, selectedSites, startDate, endDate }) {\r\n  const [chartData, setChartData] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (selectedParameters.length === 0 || selectedSites.length === 0) {\r\n      setChartData({}); // Clear chart data if no selections\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    console.log(\"Fetching water quality data...\");\r\n\r\n    // Moved processData inside the effect to avoid dependency issues.\r\n    const processData = (data) => {\r\n      const formattedData = {};\r\n\r\n      selectedParameters.forEach((parameter) => {\r\n        const config = chartConfig[parameter];\r\n        if (!config) return;\r\n\r\n        // Filter rows based on selected sites and date range\r\n        let filteredData = data.filter(row =>\r\n          row.Parameter === parameter &&\r\n          selectedSites.includes(row.Location) &&\r\n          parseInt(row.Year) >= startDate.getFullYear() &&\r\n          parseInt(row.Year) <= endDate.getFullYear()\r\n        );\r\n\r\n        filteredData.sort((a, b) => parseInt(a.Year) - parseInt(b.Year)); // Sort by year\r\n\r\n        if (filteredData.length === 0) {\r\n          formattedData[parameter] = { labels: [], datasets: [] };\r\n        } else if (config.type === \"line\") {\r\n          formattedData[parameter] = {\r\n            labels: [...new Set(filteredData.map(row => row.Year))],\r\n            datasets: selectedSites\r\n              .map((site, idx) => {\r\n                const siteData = filteredData.filter(row => row.Location === site);\r\n                return {\r\n                  label: site,\r\n                  data: siteData.map(row => parseFloat(row.Value)),\r\n                  borderColor: defaultColors[idx % defaultColors.length],\r\n                  backgroundColor: defaultColors[idx % defaultColors.length],\r\n                  fill: false,\r\n                  tension: 0.1\r\n                };\r\n              })\r\n              .filter(dataset => dataset.data.length > 0)\r\n          };\r\n        } else if (config.type === \"bar\") {\r\n          const uniqueLocations = [...new Set(filteredData.map(row => row.Location))];\r\n          formattedData[parameter] = {\r\n            labels: uniqueLocations,\r\n            datasets: [\r\n              {\r\n                label: parameter,\r\n                data: filteredData.map(row => parseFloat(row.Value)),\r\n                backgroundColor: uniqueLocations.map((_, idx) => defaultColors[idx % defaultColors.length])\r\n              }\r\n            ]\r\n          };\r\n        }\r\n      });\r\n\r\n      console.log(\"Formatted Chart Data:\", formattedData);\r\n      setChartData(formattedData);\r\n      setLoading(false);\r\n    };\r\n\r\n    fetch(\"/water_quality_data.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            console.log(\"CSV Data Parsed:\", result.data);\r\n            processData(result.data);\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error fetching CSV:\", error);\r\n        setLoading(false);\r\n      });\r\n  }, [selectedParameters, selectedSites, startDate, endDate]);\r\n\r\n  return (\r\n    <div className=\"plots-container\">\r\n      {selectedParameters.length === 0 ? (\r\n        <p className=\"no-plot-message\">Select a parameter to display plots.</p>\r\n      ) : (\r\n        selectedParameters.map((param, index) => (\r\n          <div key={index} className=\"plot-panel\">\r\n            <h4>{chartConfig[param]?.title || param}</h4>\r\n            <div className=\"plot-content\">\r\n              {loading ? (\r\n                <p>Loading data...</p>\r\n              ) : chartData[param] && chartData[param].labels.length > 0 ? (\r\n                chartConfig[param]?.type === \"line\" ? (\r\n                  <Line\r\n                    data={chartData[param]}\r\n                    options={{\r\n                      responsive: true,\r\n                      maintainAspectRatio: false, // Always disable to prevent stretching\r\n                      scales: {\r\n                        y: {\r\n                          title: { display: true, text: chartConfig[param]?.yLabel }\r\n                        }\r\n                      }\r\n                    }}\r\n                  />\r\n                ) : chartConfig[param]?.type === \"bar\" ? (\r\n                  <Bar\r\n                    data={chartData[param]}\r\n                    options={{\r\n                      responsive: true,\r\n                      maintainAspectRatio: false, // Always disable to prevent stretching\r\n                      scales: {\r\n                        y: {\r\n                          title: { display: true, text: chartConfig[param]?.yLabel }\r\n                        }\r\n                      }\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <p>No chart available</p>\r\n                )\r\n              ) : (\r\n                <p>No Data Available</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Plots;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}