{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\Plots.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartConfig = {\n  \"Total Phosphorous\": {\n    type: \"line\",\n    title: \"Total Phosphorus Trend Chart\",\n    yLabel: \"Total P (mg/m3)\"\n  },\n  \"Secchi\": {\n    type: \"bar\",\n    title: \"Secchi Comparison Chart\",\n    yLabel: \"Secchi (feet)\"\n  }\n};\nfunction Plots({\n  selectedParameters,\n  selectedSites,\n  startDate,\n  endDate\n}) {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    if (selectedParameters.length === 0) return;\n    fetch(\"/water_quality_data.csv\").then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          processData(result.data);\n        }\n      });\n    });\n  }, [selectedParameters, selectedSites, startDate, endDate]);\n  const processData = data => {\n    const formattedData = {};\n    selectedParameters.forEach(parameter => {\n      const config = chartConfig[parameter];\n      if (!config) return;\n\n      // Filter data based on sites and date range\n      let filteredData = data.filter(row => row.Parameter === parameter && selectedSites.includes(row.Location) && row.Year >= startDate.getFullYear() && row.Year <= endDate.getFullYear());\n\n      // Sort by Year\n      filteredData.sort((a, b) => a.Year - b.Year);\n      if (config.type === \"line\") {\n        // Line Chart Data (Time-Series)\n        formattedData[parameter] = {\n          labels: filteredData.map(row => row.Year),\n          datasets: selectedSites.map(site => ({\n            label: site,\n            data: filteredData.filter(row => row.Location === site).map(row => parseFloat(row.Value)),\n            borderColor: getRandomColor(),\n            fill: false,\n            tension: 0.1\n          }))\n        };\n      } else if (config.type === \"bar\") {\n        // Bar Chart Data (Comparison)\n        formattedData[parameter] = {\n          labels: filteredData.map(row => row.Location),\n          datasets: [{\n            label: parameter,\n            data: filteredData.map(row => parseFloat(row.Value)),\n            backgroundColor: \"gray\"\n          }]\n        };\n      }\n    });\n    setChartData(formattedData);\n  };\n  const getRandomColor = () => {\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plots-container\",\n    children: selectedParameters.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-plot-message\",\n      children: \"Select a parameter to display plots.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this) : selectedParameters.map((param, index) => {\n      var _chartConfig$param, _chartConfig$param2, _chartConfig$param3, _chartConfig$param4, _chartConfig$param5;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [((_chartConfig$param = chartConfig[param]) === null || _chartConfig$param === void 0 ? void 0 : _chartConfig$param.title) || param, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plot-content\",\n          children: ((_chartConfig$param2 = chartConfig[param]) === null || _chartConfig$param2 === void 0 ? void 0 : _chartConfig$param2.type) === \"line\" ? /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param3 = chartConfig[param]) === null || _chartConfig$param3 === void 0 ? void 0 : _chartConfig$param3.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this) : ((_chartConfig$param4 = chartConfig[param]) === null || _chartConfig$param4 === void 0 ? void 0 : _chartConfig$param4.type) === \"bar\" ? /*#__PURE__*/_jsxDEV(Bar, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param5 = chartConfig[param]) === null || _chartConfig$param5 === void 0 ? void 0 : _chartConfig$param5.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No chart available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(Plots, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = Plots;\nexport default Plots;\nvar _c;\n$RefreshReg$(_c, \"Plots\");","map":{"version":3,"names":["React","useEffect","useState","Line","Bar","Papa","jsxDEV","_jsxDEV","chartConfig","type","title","yLabel","Plots","selectedParameters","selectedSites","startDate","endDate","_s","chartData","setChartData","length","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","processData","data","formattedData","forEach","parameter","config","filteredData","filter","row","Parameter","includes","Location","Year","getFullYear","sort","a","b","labels","map","datasets","site","label","parseFloat","Value","borderColor","getRandomColor","fill","tension","backgroundColor","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","param","index","_chartConfig$param","_chartConfig$param2","_chartConfig$param3","_chartConfig$param4","_chartConfig$param5","options","responsive","scales","y","display","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/Plots.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport Papa from \"papaparse\";\r\n\r\nconst chartConfig = {\r\n  \"Total Phosphorous\": { type: \"line\", title: \"Total Phosphorus Trend Chart\", yLabel: \"Total P (mg/m3)\" },\r\n  \"Secchi\": { type: \"bar\", title: \"Secchi Comparison Chart\", yLabel: \"Secchi (feet)\" }\r\n};\r\n\r\nfunction Plots({ selectedParameters, selectedSites, startDate, endDate }) {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (selectedParameters.length === 0) return;\r\n\r\n    fetch(\"/water_quality_data.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            processData(result.data);\r\n          }\r\n        });\r\n      });\r\n\r\n  }, [selectedParameters, selectedSites, startDate, endDate]);\r\n\r\n  const processData = (data) => {\r\n    const formattedData = {};\r\n\r\n    selectedParameters.forEach((parameter) => {\r\n      const config = chartConfig[parameter];\r\n      if (!config) return;\r\n\r\n      // Filter data based on sites and date range\r\n      let filteredData = data.filter(row => \r\n        row.Parameter === parameter &&\r\n        selectedSites.includes(row.Location) &&\r\n        row.Year >= startDate.getFullYear() &&\r\n        row.Year <= endDate.getFullYear()\r\n      );\r\n\r\n      // Sort by Year\r\n      filteredData.sort((a, b) => a.Year - b.Year);\r\n\r\n      if (config.type === \"line\") {\r\n        // Line Chart Data (Time-Series)\r\n        formattedData[parameter] = {\r\n          labels: filteredData.map(row => row.Year),\r\n          datasets: selectedSites.map(site => ({\r\n            label: site,\r\n            data: filteredData.filter(row => row.Location === site).map(row => parseFloat(row.Value)),\r\n            borderColor: getRandomColor(),\r\n            fill: false,\r\n            tension: 0.1\r\n          }))\r\n        };\r\n      } else if (config.type === \"bar\") {\r\n        // Bar Chart Data (Comparison)\r\n        formattedData[parameter] = {\r\n          labels: filteredData.map(row => row.Location),\r\n          datasets: [\r\n            {\r\n              label: parameter,\r\n              data: filteredData.map(row => parseFloat(row.Value)),\r\n              backgroundColor: \"gray\"\r\n            }\r\n          ]\r\n        };\r\n      }\r\n    });\r\n\r\n    setChartData(formattedData);\r\n  };\r\n\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"plots-container\">\r\n      {selectedParameters.length === 0 ? (\r\n        <p className=\"no-plot-message\">Select a parameter to display plots.</p>\r\n      ) : (\r\n        selectedParameters.map((param, index) => (\r\n          <div key={index} className=\"plot-panel\">\r\n            <h4>{chartConfig[param]?.title || param} </h4>\r\n            <div className=\"plot-content\">\r\n              {chartConfig[param]?.type === \"line\" ? (\r\n                <Line data={chartData[param]} options={{ responsive: true, scales: { y: { title: { display: true, text: chartConfig[param]?.yLabel } } } }} />\r\n              ) : chartConfig[param]?.type === \"bar\" ? (\r\n                <Bar data={chartData[param]} options={{ responsive: true, scales: { y: { title: { display: true, text: chartConfig[param]?.yLabel } } } }} />\r\n              ) : (\r\n                <p>No chart available</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Plots;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB;AAC3C,OAAO,eAAe;AACtB,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,WAAW,GAAG;EAClB,mBAAmB,EAAE;IAAEC,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE,8BAA8B;IAAEC,MAAM,EAAE;EAAkB,CAAC;EACvG,QAAQ,EAAE;IAAEF,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE,yBAAyB;IAAEC,MAAM,EAAE;EAAgB;AACrF,CAAC;AAED,SAASC,KAAKA,CAAC;EAAEC,kBAAkB;EAAEC,aAAa;EAAEC,SAAS;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACxE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,IAAIY,kBAAkB,CAACO,MAAM,KAAK,CAAC,EAAE;IAErCC,KAAK,CAAC,yBAAyB,CAAC,CAC7BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,OAAO,IAAK;MACjBpB,IAAI,CAACqB,KAAK,CAACD,OAAO,EAAE;QAClBE,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,QAAQ,EAAGC,MAAM,IAAK;UACpBC,WAAW,CAACD,MAAM,CAACE,IAAI,CAAC;QAC1B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EAEN,CAAC,EAAE,CAACnB,kBAAkB,EAAEC,aAAa,EAAEC,SAAS,EAAEC,OAAO,CAAC,CAAC;EAE3D,MAAMe,WAAW,GAAIC,IAAI,IAAK;IAC5B,MAAMC,aAAa,GAAG,CAAC,CAAC;IAExBpB,kBAAkB,CAACqB,OAAO,CAAEC,SAAS,IAAK;MACxC,MAAMC,MAAM,GAAG5B,WAAW,CAAC2B,SAAS,CAAC;MACrC,IAAI,CAACC,MAAM,EAAE;;MAEb;MACA,IAAIC,YAAY,GAAGL,IAAI,CAACM,MAAM,CAACC,GAAG,IAChCA,GAAG,CAACC,SAAS,KAAKL,SAAS,IAC3BrB,aAAa,CAAC2B,QAAQ,CAACF,GAAG,CAACG,QAAQ,CAAC,IACpCH,GAAG,CAACI,IAAI,IAAI5B,SAAS,CAAC6B,WAAW,CAAC,CAAC,IACnCL,GAAG,CAACI,IAAI,IAAI3B,OAAO,CAAC4B,WAAW,CAAC,CAClC,CAAC;;MAED;MACAP,YAAY,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,IAAI,GAAGI,CAAC,CAACJ,IAAI,CAAC;MAE5C,IAAIP,MAAM,CAAC3B,IAAI,KAAK,MAAM,EAAE;QAC1B;QACAwB,aAAa,CAACE,SAAS,CAAC,GAAG;UACzBa,MAAM,EAAEX,YAAY,CAACY,GAAG,CAACV,GAAG,IAAIA,GAAG,CAACI,IAAI,CAAC;UACzCO,QAAQ,EAAEpC,aAAa,CAACmC,GAAG,CAACE,IAAI,KAAK;YACnCC,KAAK,EAAED,IAAI;YACXnB,IAAI,EAAEK,YAAY,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACG,QAAQ,KAAKS,IAAI,CAAC,CAACF,GAAG,CAACV,GAAG,IAAIc,UAAU,CAACd,GAAG,CAACe,KAAK,CAAC,CAAC;YACzFC,WAAW,EAAEC,cAAc,CAAC,CAAC;YAC7BC,IAAI,EAAE,KAAK;YACXC,OAAO,EAAE;UACX,CAAC,CAAC;QACJ,CAAC;MACH,CAAC,MAAM,IAAItB,MAAM,CAAC3B,IAAI,KAAK,KAAK,EAAE;QAChC;QACAwB,aAAa,CAACE,SAAS,CAAC,GAAG;UACzBa,MAAM,EAAEX,YAAY,CAACY,GAAG,CAACV,GAAG,IAAIA,GAAG,CAACG,QAAQ,CAAC;UAC7CQ,QAAQ,EAAE,CACR;YACEE,KAAK,EAAEjB,SAAS;YAChBH,IAAI,EAAEK,YAAY,CAACY,GAAG,CAACV,GAAG,IAAIc,UAAU,CAACd,GAAG,CAACe,KAAK,CAAC,CAAC;YACpDK,eAAe,EAAE;UACnB,CAAC;QAEL,CAAC;MACH;IACF,CAAC,CAAC;IAEFxC,YAAY,CAACc,aAAa,CAAC;EAC7B,CAAC;EAED,MAAMuB,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAO,OAAOI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,aAAa;EAC5D,CAAC;EAED,oBACEvD,OAAA;IAAKwD,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC7BnD,kBAAkB,CAACO,MAAM,KAAK,CAAC,gBAC9Bb,OAAA;MAAGwD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAoC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEvEvD,kBAAkB,CAACoC,GAAG,CAAC,CAACoB,KAAK,EAAEC,KAAK;MAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA;MAAA,oBAClCpE,OAAA;QAAiBwD,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACrCzD,OAAA;UAAAyD,QAAA,GAAK,EAAAO,kBAAA,GAAA/D,WAAW,CAAC6D,KAAK,CAAC,cAAAE,kBAAA,uBAAlBA,kBAAA,CAAoB7D,KAAK,KAAI2D,KAAK,EAAC,GAAC;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9C7D,OAAA;UAAKwD,SAAS,EAAC,cAAc;UAAAC,QAAA,EAC1B,EAAAQ,mBAAA,GAAAhE,WAAW,CAAC6D,KAAK,CAAC,cAAAG,mBAAA,uBAAlBA,mBAAA,CAAoB/D,IAAI,MAAK,MAAM,gBAClCF,OAAA,CAACJ,IAAI;YAAC6B,IAAI,EAAEd,SAAS,CAACmD,KAAK,CAAE;YAACO,OAAO,EAAE;cAAEC,UAAU,EAAE,IAAI;cAAEC,MAAM,EAAE;gBAAEC,CAAC,EAAE;kBAAErE,KAAK,EAAE;oBAAEsE,OAAO,EAAE,IAAI;oBAAExD,IAAI,GAAAiD,mBAAA,GAAEjE,WAAW,CAAC6D,KAAK,CAAC,cAAAI,mBAAA,uBAAlBA,mBAAA,CAAoB9D;kBAAO;gBAAE;cAAE;YAAE;UAAE;YAAAsD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC5I,EAAAM,mBAAA,GAAAlE,WAAW,CAAC6D,KAAK,CAAC,cAAAK,mBAAA,uBAAlBA,mBAAA,CAAoBjE,IAAI,MAAK,KAAK,gBACpCF,OAAA,CAACH,GAAG;YAAC4B,IAAI,EAAEd,SAAS,CAACmD,KAAK,CAAE;YAACO,OAAO,EAAE;cAAEC,UAAU,EAAE,IAAI;cAAEC,MAAM,EAAE;gBAAEC,CAAC,EAAE;kBAAErE,KAAK,EAAE;oBAAEsE,OAAO,EAAE,IAAI;oBAAExD,IAAI,GAAAmD,mBAAA,GAAEnE,WAAW,CAAC6D,KAAK,CAAC,cAAAM,mBAAA,uBAAlBA,mBAAA,CAAoBhE;kBAAO;gBAAE;cAAE;YAAE;UAAE;YAAAsD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAE7I7D,OAAA;YAAAyD,QAAA,EAAG;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QACzB;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA,GAVEE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWV,CAAC;IAAA,CACP;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnD,EAAA,CA9FQL,KAAK;AAAAqE,EAAA,GAALrE,KAAK;AAgGd,eAAeA,KAAK;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}