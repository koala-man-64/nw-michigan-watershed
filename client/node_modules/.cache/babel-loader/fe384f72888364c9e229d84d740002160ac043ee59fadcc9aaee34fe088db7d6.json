{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StorageContextClient } from \"./StorageContextClient\";\nimport { getCoreClientOptions, getCredentialFromPipeline } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport class StorageClient {\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  constructor(url, pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline));\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n    this.credential = getCredentialFromPipeline(pipeline);\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext;\n    storageClientContext.requestContentType = undefined;\n  }\n}","map":{"version":3,"names":["StorageContextClient","getCoreClientOptions","getCredentialFromPipeline","escapeURLPath","getURLScheme","iEqual","getAccountNameFromUrl","StorageClient","constructor","url","pipeline","accountName","storageClientContext","isHttps","credential","requestContentType","undefined"],"sources":["C:\\Users\\rdpro\\Projects\\NW Michigan Watershed Coalition\\client\\node_modules\\@azure\\storage-blob\\src\\StorageClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { StorageClient as StorageClientContext } from \"./generated/src/\";\nimport { StorageContextClient } from \"./StorageContextClient\";\nimport type { PipelineLike } from \"./Pipeline\";\nimport { getCoreClientOptions, getCredentialFromPipeline } from \"./Pipeline\";\nimport { escapeURLPath, getURLScheme, iEqual, getAccountNameFromUrl } from \"./utils/utils.common\";\nimport type { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport type { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n  public readonly accountName: string;\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: PipelineLike;\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: PipelineLike) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.accountName = getAccountNameFromUrl(url);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline));\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = getCredentialFromPipeline(pipeline);\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,oBAAoB,QAAQ,wBAAwB;AAE7D,SAASC,oBAAoB,EAAEC,yBAAyB,QAAQ,YAAY;AAC5E,SAASC,aAAa,EAAEC,YAAY,EAAEC,MAAM,EAAEC,qBAAqB,QAAQ,sBAAsB;AAgBjG;;;;AAIA,OAAM,MAAgBC,aAAa;EAyBjC;;;;;EAKAC,YAAsBC,GAAW,EAAEC,QAAsB;IACvD;IACA,IAAI,CAACD,GAAG,GAAGN,aAAa,CAACM,GAAG,CAAC;IAC7B,IAAI,CAACE,WAAW,GAAGL,qBAAqB,CAACG,GAAG,CAAC;IAC7C,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,oBAAoB,GAAG,IAAIZ,oBAAoB,CAAC,IAAI,CAACS,GAAG,EAAER,oBAAoB,CAACS,QAAQ,CAAC,CAAC;IAE9F,IAAI,CAACG,OAAO,GAAGR,MAAM,CAACD,YAAY,CAAC,IAAI,CAACK,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC;IAE5D,IAAI,CAACK,UAAU,GAAGZ,yBAAyB,CAACQ,QAAQ,CAAC;IAErD;IACA,MAAME,oBAAoB,GAAG,IAAI,CAACA,oBAA2B;IAC7DA,oBAAoB,CAACG,kBAAkB,GAAGC,SAAS;EACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}