{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\Plots.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Chart, registerables } from \"chart.js\";\nimport Papa from \"papaparse\";\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\n\n// Chart Configuration\nconst chartConfig = {\n  \"Total Phosphorous\": {\n    type: \"line\",\n    title: \"Total Phosphorus Trend Chart\",\n    yLabel: \"Total P (mg/m3)\"\n  },\n  \"Secchi\": {\n    type: \"bar\",\n    title: \"Secchi Comparison Chart\",\n    yLabel: \"Secchi (feet)\"\n  }\n};\nfunction Plots({\n  selectedParameters,\n  selectedSites,\n  startDate,\n  endDate\n}) {\n  _s();\n  const [chartData, setChartData] = useState({}); // Store the processed chart data\n\n  useEffect(() => {\n    if (selectedParameters.length === 0) return; // Don't fetch if no parameters are selected\n\n    fetch(\"/water_quality_data.csv\").then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          processData(result.data);\n        }\n      });\n    });\n  }, [selectedParameters, selectedSites, startDate, endDate]);\n  const processData = data => {\n    const formattedData = {};\n    selectedParameters.forEach(parameter => {\n      const config = chartConfig[parameter];\n      if (!config) return;\n\n      // Filter rows based on selected sites and date range\n      let filteredData = data.filter(row => row.Parameter === parameter && selectedSites.includes(row.Location) && parseInt(row.Year) >= startDate.getFullYear() && parseInt(row.Year) <= endDate.getFullYear());\n      filteredData.sort((a, b) => parseInt(a.Year) - parseInt(b.Year)); // Sort by year\n\n      if (filteredData.length === 0) {\n        formattedData[parameter] = {\n          labels: [],\n          datasets: []\n        };\n      } else if (config.type === \"line\") {\n        // Line chart for time-series trend\n        formattedData[parameter] = {\n          labels: filteredData.map(row => row.Year),\n          datasets: selectedSites.map(site => ({\n            label: site,\n            data: filteredData.filter(row => row.Location === site).map(row => parseFloat(row.Value)),\n            borderColor: getRandomColor(),\n            fill: false,\n            tension: 0.1\n          }))\n        };\n      } else if (config.type === \"bar\") {\n        // Bar chart for comparisons\n        formattedData[parameter] = {\n          labels: filteredData.map(row => row.Location),\n          datasets: [{\n            label: parameter,\n            data: filteredData.map(row => parseFloat(row.Value)),\n            backgroundColor: \"gray\"\n          }]\n        };\n      }\n    });\n    setChartData(formattedData);\n  };\n  const getRandomColor = () => {\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`; // Randomized color\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plots-container\",\n    children: selectedParameters.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-plot-message\",\n      children: \"Select a parameter to display plots.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : selectedParameters.map((param, index) => {\n      var _chartConfig$param, _chartConfig$param2, _chartConfig$param3, _chartConfig$param4, _chartConfig$param5;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [((_chartConfig$param = chartConfig[param]) === null || _chartConfig$param === void 0 ? void 0 : _chartConfig$param.title) || param, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plot-content\",\n          children: chartData[param] && chartData[param].labels.length > 0 ? ((_chartConfig$param2 = chartConfig[param]) === null || _chartConfig$param2 === void 0 ? void 0 : _chartConfig$param2.type) === \"line\" ? /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param3 = chartConfig[param]) === null || _chartConfig$param3 === void 0 ? void 0 : _chartConfig$param3.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 19\n          }, this) : ((_chartConfig$param4 = chartConfig[param]) === null || _chartConfig$param4 === void 0 ? void 0 : _chartConfig$param4.type) === \"bar\" ? /*#__PURE__*/_jsxDEV(Bar, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param5 = chartConfig[param]) === null || _chartConfig$param5 === void 0 ? void 0 : _chartConfig$param5.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No chart available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(Plots, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = Plots;\nexport default Plots;\nvar _c;\n$RefreshReg$(_c, \"Plots\");","map":{"version":3,"names":["React","useEffect","useState","Line","Bar","Chart","registerables","Papa","jsxDEV","_jsxDEV","register","chartConfig","type","title","yLabel","Plots","selectedParameters","selectedSites","startDate","endDate","_s","chartData","setChartData","length","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","processData","data","formattedData","forEach","parameter","config","filteredData","filter","row","Parameter","includes","Location","parseInt","Year","getFullYear","sort","a","b","labels","datasets","map","site","label","parseFloat","Value","borderColor","getRandomColor","fill","tension","backgroundColor","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","param","index","_chartConfig$param","_chartConfig$param2","_chartConfig$param3","_chartConfig$param4","_chartConfig$param5","options","responsive","scales","y","display","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/Plots.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport Papa from \"papaparse\";\r\n\r\n// Register Chart.js components\r\nChart.register(...registerables);\r\n\r\n// Chart Configuration\r\nconst chartConfig = {\r\n  \"Total Phosphorous\": {\r\n    type: \"line\",\r\n    title: \"Total Phosphorus Trend Chart\",\r\n    yLabel: \"Total P (mg/m3)\"\r\n  },\r\n  \"Secchi\": {\r\n    type: \"bar\",\r\n    title: \"Secchi Comparison Chart\",\r\n    yLabel: \"Secchi (feet)\"\r\n  }\r\n};\r\n\r\nfunction Plots({ selectedParameters, selectedSites, startDate, endDate }) {\r\n  const [chartData, setChartData] = useState({}); // Store the processed chart data\r\n\r\n  useEffect(() => {\r\n    if (selectedParameters.length === 0) return; // Don't fetch if no parameters are selected\r\n\r\n    fetch(\"/water_quality_data.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            processData(result.data);\r\n          }\r\n        });\r\n      });\r\n\r\n  }, [selectedParameters, selectedSites, startDate, endDate]);\r\n\r\n  const processData = (data) => {\r\n    const formattedData = {};\r\n\r\n    selectedParameters.forEach((parameter) => {\r\n      const config = chartConfig[parameter];\r\n      if (!config) return;\r\n\r\n      // Filter rows based on selected sites and date range\r\n      let filteredData = data.filter(row =>\r\n        row.Parameter === parameter &&\r\n        selectedSites.includes(row.Location) &&\r\n        parseInt(row.Year) >= startDate.getFullYear() &&\r\n        parseInt(row.Year) <= endDate.getFullYear()\r\n      );\r\n\r\n      filteredData.sort((a, b) => parseInt(a.Year) - parseInt(b.Year)); // Sort by year\r\n\r\n      if (filteredData.length === 0) {\r\n        formattedData[parameter] = { labels: [], datasets: [] };\r\n      } else if (config.type === \"line\") {\r\n        // Line chart for time-series trend\r\n        formattedData[parameter] = {\r\n          labels: filteredData.map(row => row.Year),\r\n          datasets: selectedSites.map(site => ({\r\n            label: site,\r\n            data: filteredData.filter(row => row.Location === site).map(row => parseFloat(row.Value)),\r\n            borderColor: getRandomColor(),\r\n            fill: false,\r\n            tension: 0.1\r\n          }))\r\n        };\r\n      } else if (config.type === \"bar\") {\r\n        // Bar chart for comparisons\r\n        formattedData[parameter] = {\r\n          labels: filteredData.map(row => row.Location),\r\n          datasets: [\r\n            {\r\n              label: parameter,\r\n              data: filteredData.map(row => parseFloat(row.Value)),\r\n              backgroundColor: \"gray\"\r\n            }\r\n          ]\r\n        };\r\n      }\r\n    });\r\n\r\n    setChartData(formattedData);\r\n  };\r\n\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`; // Randomized color\r\n  };\r\n\r\n  return (\r\n    <div className=\"plots-container\">\r\n      {selectedParameters.length === 0 ? (\r\n        <p className=\"no-plot-message\">Select a parameter to display plots.</p>\r\n      ) : (\r\n        selectedParameters.map((param, index) => (\r\n          <div key={index} className=\"plot-panel\">\r\n            <h4>{chartConfig[param]?.title || param} </h4>\r\n            <div className=\"plot-content\">\r\n              {chartData[param] && chartData[param].labels.length > 0 ? (\r\n                chartConfig[param]?.type === \"line\" ? (\r\n                  <Line\r\n                    data={chartData[param]}\r\n                    options={{\r\n                      responsive: true,\r\n                      scales: {\r\n                        y: {\r\n                          title: { display: true, text: chartConfig[param]?.yLabel }\r\n                        }\r\n                      }\r\n                    }}\r\n                  />\r\n                ) : chartConfig[param]?.type === \"bar\" ? (\r\n                  <Bar\r\n                    data={chartData[param]}\r\n                    options={{\r\n                      responsive: true,\r\n                      scales: {\r\n                        y: {\r\n                          title: { display: true, text: chartConfig[param]?.yLabel }\r\n                        }\r\n                      }\r\n                    }}\r\n                  />\r\n                ) : (\r\n                  <p>No chart available</p>\r\n                )\r\n              ) : (\r\n                <p>Loading data...</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Plots;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}