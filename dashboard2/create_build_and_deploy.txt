# End-to-End Deployment Guide

This guide will walk you through:

1. Creating a GitHub repository from scratch.
2. Adding a local project and pushing it to GitHub.
3. Building a Docker container from the repository.
4. Deploying the Docker container to an Azure Container Registry (ACR).
5. Restarting an Azure Container Instance (ACI) with the newly published image.

-----------------------------------------------------------------------------------------------------------

## Table of Contents

- [Create a GitHub Repository](#create-a-github-repository)
- [Set Up a Local Project](#set-up-a-local-project)
- [Push the Project to GitHub](#push-the-project-to-github)
- [Build a Docker Container](#build-a-docker-container)
- [Deploy to Azure Container Registry](#deploy-to-azure-container-registry)
- [Restart the Azure Container Instance](#restart-the-azure-container-instance)
- [Discussion and Next Steps](#discussion-and-next-steps)

-----------------------------------------------------------------------------------------------------------

## Create a GitHub Repository

   1. **Sign in to GitHub**  
      Go to [GitHub](https://github.com) and log in to your account.

   2. **Create a New Repository**  
      - Click the `+` icon in the top-right corner and select **New repository**.
      - Fill in the repository name, add a description (optional), and choose whether the repo is public or private.
      - Optionally initialize with a README.
      - Click **Create repository**.

-----------------------------------------------------------------------------------------------------------

## Set Up a Local Project

   1. **Create a New Directory**

      Open your terminal and run:
      mkdir my-project
      cd my-project


   2. Initialize a Git repository
      - git init

   3. Add Project Files
      - echo "# My Project" > README.md
      - echo "print('Hello, world!')" > app.py
      - add all files in a folder: git add .


   4. Create a Dckerfile
      # Use an official Python runtime as a parent image
      FROM python:3.9-slim

      # Set the working directory in the container
      WORKDIR /app

      # Copy the current directory contents into the container at /app
      COPY . /app

      # Install any needed packages specified in requirements.txt
      RUN pip install --no-cache-dir -r requirements.txt || true

      # Make port 80 available to the world outside this container (optional)
      EXPOSE 80

      # Define environment variable
      ENV NAME World

      # Run app.py when the container launches
      CMD ["python", "app.py"]

-----------------------------------------------------------------------------------------------------------
# Uploading a Local React Project to an Empty Git Repository

   This guide will show you how to take an existing local React project and push it to an empty GitHub repository on the `main` branch.

   ## Prerequisites

   - **Local React Project:** Ensure your project is ready and all files are saved.
   - **Git Installed:** Make sure Git is installed on your machine.
   - **Empty GitHub Repository:** Create an empty repository on GitHub (without a README, .gitignore, etc.).


   ## Step-by-Step Commands

   1. **Open your terminal and navigate to your project directory:**
      cd /path/to/your/react-project

   2. Initialize a Git repository 
      git init
      
   3. Rename the default branch to main (if necessary):
      This command renames your current branch to main:        
         git branch -M main

   4. Stage all files for commit: git add .

   5. Commit the staged files: git commit -m "Initial commit: Upload local React project"

   6. Add the remote GitHub repository: git remote add origin https://github.com/koaal-man-64/nw-michigan-watershed.git

   7. Push your local project to GitHub: git push -u origin main
-----------------------------------------------------------------------------------------------------------

## Push the Project to GitHub

   1. Add Remote Repository
      - Replace yourusername and your-repo-name with your GitHub details:
      - git remote add origin https://github.com/koala-man-64/nw-michigan-watershed.git 

   2. Push to GitHub
      Depending on your default branch (often main or master):
         - git push -u origin master
         or
         git pull origin main
         - git push -u origin main

         - git push origin --delete master

-----------------------------------------------------------------------------------------------------------

## Build a Docker Container

   1. Build the Docker Image
      - From your project directory, run:
         - docker build -t myproject:latest .
      - Test the Docker Image Locally

   2. Run the container to verify it works:
      - docker run --rm myproject:latest

-----------------------------------------------------------------------------------------------------------

## Deploy to Azure Container Registry

   1. Log in to Azure
      - Open your terminal and run:
         - az login

   2.Create an Azure Container Registry (if needed)
      - Replace myResourceGroup and myACRRegistry with your details:
         - az acr create --resource-group myResourceGroup --name myACRRegistry --sku Basic

   3. Log in to Your ACR
      - az acr login --name myACRRegistry

   4. Tag Your Docker Image
      - Tag the image to point to your ACR. Note the ACR login server format:
         - docker tag myproject:latest myacrregistry.azurecr.io/myproject:latest

   5. Push the Image to ACR
      - docker push myacrregistry.azurecr.io/myproject:latest

-----------------------------------------------------------------------------------------------------------

## Restart the Azure Container Instance

   1. Restart the Container Instance
      - az container restart --resource-group myResourceGroup --name myContainerInstance

   2. (Optional) Update the Container Instance with the New Image
      - If a simple restart does not pull the new image, you can force an update:
      - az container update --resource-group myResourceGroup --name myContainerInstance --image myacrregistry.azurecr.io/myproject:latest

-----------------------------------------------------------------------------------------------------------

## Setup Build and Deploy Workflows

   1. Prepare Azure Credentials and GitHub Secrets
      - Create an Azure Service Principal (if you haven't already):
         - Run the following command (replace placeholders as needed):
            - az ad sp create-for-rbac --name "myServicePrincipal" --role contributor --scopes /subscriptions/<subscription_id>/resourceGroups/<resource_group> --sdk-auth
         - This command outputs a JSON object with your credentials.
      - Add Secrets to GitHub:
         - In your GitHub repository, navigate to Settings > Secrets > Actions and add the following secrets:
            - AZURE_CREDENTIALS: Paste the JSON output from the service principal creation.
            - ACR_NAME: Your Azure Container Registry name (e.g., myacrregistry).
            - AZURE_RESOURCE_GROUP: The name of your resource group (e.g., myResourceGroup).
            - AZURE_CONTAINER_INSTANCE: The name of your container instance (e.g., myContainerInstance).

   2. Create the GitHub Actions Workflow File
      - Create a directory .github/workflows in your repository and add a file named build-deploy.yml with the following content:
         name: Build and Deploy

         on:
         push:
            branches: [main]

         jobs:
         build-deploy:
            runs-on: ubuntu-latest

            steps:
            - name: Checkout Code
               uses: actions/checkout@v2

            - name: Set up Docker Buildx
               uses: docker/setup-buildx-action@v1

            - name: Login to Azure
               uses: azure/login@v1
               with:
               creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Build Docker Image
               run: docker build -t myproject:latest .

            - name: Tag Docker Image for ACR
               run: docker tag myproject:latest ${{ secrets.ACR_NAME }}.azurecr.io/myproject:latest

            - name: Login to ACR
               run: az acr login --name ${{ secrets.ACR_NAME }}

            - name: Push Docker Image to ACR
               run: docker push ${{ secrets.ACR_NAME }}.azurecr.io/myproject:latest

            - name: Restart Azure Container Instance
               run: az container restart --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_CONTAINER_INSTANCE }}

      3. Commit and Push
         - Commit your changes and push them to the main branch. Every push to main will now trigger the workflow that builds your Docker image, pushes it to ACR, and restarts your ACI.

      4. Monitor Workflow Runs
         - Go to the Actions tab on your GitHub repository to see the workflow runs.
         - Check logs for each step to ensure that your build and deployment are successful.
         - Troubleshoot any errors by reviewing the logs and verifying your GitHub secrets and Azure configurations.