{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Data() {\n  _s();\n  // Page-level configuration variables\n  const storageAccountName = \"ppastorageaccount159\";\n  const sasToken = \"sp=r&st=2025-03-20T01:56:55Z&se=2035-03-20T09:56:55Z&spr=https&sv=2024-11-04&sr=c&sig=SVCWjhHWXWJsy9r8lkiYfj7ERMyRw1NzfX19CLqf4eA%3D\";\n  const containerName = \"nwmiws\";\n\n  // List of available CSV files in the Azure Blob container.\n  const csvFiles = [\"locations.csv\", \"water_quality_data.csv\"];\n  const [selectedFile, setSelectedFile] = useState(csvFiles[0]);\n  const [csvData, setCsvData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Function to load CSV file from the Azure Blob container.\n  const loadCSV = fileName => {\n    setLoading(true);\n    // Construct the file URL with the SAS token appended for read access.\n    const fileUrl = `https://${storageAccountName}.blob.core.windows.net/${containerName}/${fileName}?${sasToken}`;\n    fetch(fileUrl).then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        complete: result => {\n          // Remove rows that are completely empty.\n          const filteredData = result.data.filter(row => Object.values(row).some(val => val && val.toString().trim() !== \"\"));\n          setCsvData(filteredData);\n          setLoading(false);\n        }\n      });\n    }).catch(error => {\n      console.error(\"Error loading CSV:\", error);\n      setLoading(false);\n    });\n  };\n\n  // Load CSV whenever the selected file changes.\n  useEffect(() => {\n    loadCSV(selectedFile);\n  }, [selectedFile]);\n\n  // Handle changes in CSV data cells.\n  const handleChange = (rowIndex, field, newValue) => {\n    const updatedData = [...csvData];\n    updatedData[rowIndex][field] = newValue;\n    setCsvData(updatedData);\n  };\n\n  // Add new row: use headers from the first row if available.\n  const addNewRow = () => {\n    let newRow = {};\n    if (csvData.length > 0) {\n      const headers = Object.keys(csvData[0]);\n      headers.forEach(header => {\n        newRow[header] = \"\";\n      });\n    }\n    setCsvData([...csvData, newRow]);\n  };\n\n  // Commit save function: upload the updated CSV file to Azure Blob Storage.\n  const commitSave = async () => {\n    // Convert the current CSV data back to CSV string.\n    const csv = Papa.unparse(csvData);\n    const blobData = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n\n    // Create a BlobServiceClient using the SAS token.\n    const blobServiceClient = new BlobServiceClient(`https://${storageAccountName}.blob.core.windows.net/?${sasToken}`);\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n\n    // Append '_updated' to the original filename.\n    const updatedFileName = selectedFile.replace(\".csv\", \"_updated.csv\");\n    const blockBlobClient = containerClient.getBlockBlobClient(updatedFileName);\n    try {\n      // Upload the blob data.\n      await blockBlobClient.uploadData(blobData, {\n        blobHTTPHeaders: {\n          blobContentType: \"text/csv\"\n        }\n      });\n      alert(\"CSV file uploaded successfully!\");\n    } catch (error) {\n      console.error(\"Error uploading CSV:\", error);\n      alert(\"Error uploading CSV file.\");\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading CSV data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"csv-select\",\n        children: \"Select CSV File: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"csv-select\",\n        value: selectedFile,\n        onChange: e => setSelectedFile(e.target.value),\n        children: csvFiles.map((file, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: file,\n          children: file\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewRow,\n        children: \"Add New Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"5\",\n      cellSpacing: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: csvData.length > 0 && Object.keys(csvData[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: csvData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.entries(row).map(([field, value], colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value,\n              onChange: e => handleChange(rowIndex, field, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: commitSave,\n      children: \"Commit Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Data, \"apMcYVI/Us8zD/6fAK6IdEHvx28=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","Papa","BlobServiceClient","jsxDEV","_jsxDEV","Data","_s","storageAccountName","sasToken","containerName","csvFiles","selectedFile","setSelectedFile","csvData","setCsvData","loading","setLoading","loadCSV","fileName","fileUrl","fetch","then","response","text","csvText","parse","header","complete","result","filteredData","data","filter","row","Object","values","some","val","toString","trim","catch","error","console","handleChange","rowIndex","field","newValue","updatedData","addNewRow","newRow","length","headers","keys","forEach","commitSave","csv","unparse","blobData","Blob","type","blobServiceClient","containerClient","getContainerClient","updatedFileName","replace","blockBlobClient","getBlockBlobClient","uploadData","blobHTTPHeaders","blobContentType","alert","children","_jsxFileName","lineNumber","columnNumber","style","padding","marginBottom","htmlFor","id","value","onChange","e","target","map","file","idx","onClick","border","cellPadding","cellSpacing","index","entries","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/Data.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { BlobServiceClient } from \"@azure/storage-blob\";\r\n\r\nfunction Data() {\r\n  // Page-level configuration variables\r\n  const storageAccountName = \"ppastorageaccount159\";\r\n  const sasToken = \"sp=r&st=2025-03-20T01:56:55Z&se=2035-03-20T09:56:55Z&spr=https&sv=2024-11-04&sr=c&sig=SVCWjhHWXWJsy9r8lkiYfj7ERMyRw1NzfX19CLqf4eA%3D\";\r\n  const containerName = \"nwmiws\";\r\n  \r\n  // List of available CSV files in the Azure Blob container.\r\n  const csvFiles = [\"locations.csv\", \"water_quality_data.csv\"];\r\n  const [selectedFile, setSelectedFile] = useState(csvFiles[0]);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Function to load CSV file from the Azure Blob container.\r\n  const loadCSV = (fileName) => {\r\n    setLoading(true);\r\n    // Construct the file URL with the SAS token appended for read access.\r\n    const fileUrl = `https://${storageAccountName}.blob.core.windows.net/${containerName}/${fileName}?${sasToken}`;\r\n    \r\n    fetch(fileUrl)\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          complete: (result) => {\r\n            // Remove rows that are completely empty.\r\n            const filteredData = result.data.filter(row =>\r\n              Object.values(row).some(\r\n                (val) => val && val.toString().trim() !== \"\"\r\n              )\r\n            );\r\n            setCsvData(filteredData);\r\n            setLoading(false);\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading CSV:\", error);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // Load CSV whenever the selected file changes.\r\n  useEffect(() => {\r\n    loadCSV(selectedFile);\r\n  }, [selectedFile]);\r\n\r\n  // Handle changes in CSV data cells.\r\n  const handleChange = (rowIndex, field, newValue) => {\r\n    const updatedData = [...csvData];\r\n    updatedData[rowIndex][field] = newValue;\r\n    setCsvData(updatedData);\r\n  };\r\n\r\n  // Add new row: use headers from the first row if available.\r\n  const addNewRow = () => {\r\n    let newRow = {};\r\n    if (csvData.length > 0) {\r\n      const headers = Object.keys(csvData[0]);\r\n      headers.forEach((header) => {\r\n        newRow[header] = \"\";\r\n      });\r\n    }\r\n    setCsvData([...csvData, newRow]);\r\n  };\r\n\r\n  // Commit save function: upload the updated CSV file to Azure Blob Storage.\r\n  const commitSave = async () => {\r\n    // Convert the current CSV data back to CSV string.\r\n    const csv = Papa.unparse(csvData);\r\n    const blobData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\r\n\r\n    // Create a BlobServiceClient using the SAS token.\r\n    const blobServiceClient = new BlobServiceClient(\r\n      `https://${storageAccountName}.blob.core.windows.net/?${sasToken}`\r\n    );\r\n    const containerClient = blobServiceClient.getContainerClient(containerName);\r\n\r\n    // Append '_updated' to the original filename.\r\n    const updatedFileName = selectedFile.replace(\".csv\", \"_updated.csv\");\r\n    const blockBlobClient = containerClient.getBlockBlobClient(updatedFileName);\r\n\r\n    try {\r\n      // Upload the blob data.\r\n      await blockBlobClient.uploadData(blobData, {\r\n        blobHTTPHeaders: { blobContentType: \"text/csv\" },\r\n      });\r\n      alert(\"CSV file uploaded successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error uploading CSV:\", error);\r\n      alert(\"Error uploading CSV file.\");\r\n    }\r\n  };\r\n\r\n  if (loading) return <div>Loading CSV data...</div>;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h2>Data Editor</h2>\r\n      {/* CSV File Selection */}\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <label htmlFor=\"csv-select\">Select CSV File: </label>\r\n        <select\r\n          id=\"csv-select\"\r\n          value={selectedFile}\r\n          onChange={(e) => setSelectedFile(e.target.value)}\r\n        >\r\n          {csvFiles.map((file, idx) => (\r\n            <option key={idx} value={file}>\r\n              {file}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {/* Add New Row Button */}\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <button onClick={addNewRow}>Add New Row</button>\r\n      </div>\r\n      {/* Editable CSV Data Table */}\r\n      <table border=\"1\" cellPadding=\"5\" cellSpacing=\"0\">\r\n        <thead>\r\n          <tr>\r\n            {csvData.length > 0 &&\r\n              Object.keys(csvData[0]).map((header, index) => (\r\n                <th key={index}>{header}</th>\r\n              ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {csvData.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {Object.entries(row).map(([field, value], colIndex) => (\r\n                <td key={colIndex}>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={(e) =>\r\n                      handleChange(rowIndex, field, e.target.value)\r\n                    }\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n      {/* Commit Save Button */}\r\n      <button onClick={commitSave}>Commit Save</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Data;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}