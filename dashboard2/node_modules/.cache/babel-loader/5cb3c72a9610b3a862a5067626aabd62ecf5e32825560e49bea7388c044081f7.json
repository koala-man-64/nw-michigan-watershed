{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\Plots.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport Papa from \"papaparse\";\n\n// Configuration dictionary that maps each parameter to its respective chart type and labels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chartConfig = {\n  \"Total Phosphorous\": {\n    type: \"line\",\n    // Line chart for trend visualization over time\n    title: \"Total Phosphorus Trend Chart\",\n    yLabel: \"Total P (mg/m3)\" // Y-axis label\n  },\n  \"Secchi\": {\n    type: \"bar\",\n    // Bar chart for comparison across locations\n    title: \"Secchi Comparison Chart\",\n    yLabel: \"Secchi (feet)\" // Y-axis label\n  }\n};\nfunction Plots({\n  selectedParameters,\n  selectedSites,\n  startDate,\n  endDate\n}) {\n  _s();\n  const [chartData, setChartData] = useState({}); // Stores data for each selected parameter\n\n  useEffect(() => {\n    // If no parameters are selected, no need to fetch or process data\n    if (selectedParameters.length === 0) return;\n\n    // Fetch water quality data from CSV\n    fetch(\"/water_quality_data.csv\").then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          processData(result.data); // Process the parsed CSV data\n        }\n      });\n    });\n  }, [selectedParameters, selectedSites, startDate, endDate]); // Re-fetch data when filters change\n\n  const processData = data => {\n    const formattedData = {}; // Object to store formatted datasets for each parameter\n\n    // Loop through each selected parameter and generate the respective chart data\n    selectedParameters.forEach(parameter => {\n      const config = chartConfig[parameter]; // Get chart config for this parameter\n      if (!config) return; // Skip if no config is defined for this parameter\n\n      // Filter data based on selected sites and date range\n      let filteredData = data.filter(row => row.Parameter === parameter &&\n      // Match parameter\n      selectedSites.includes(row.Location) &&\n      // Match selected site\n      row.Year >= startDate.getFullYear() && row.Year <= endDate.getFullYear() // Match year range\n      );\n\n      // Sort data chronologically by Year\n      filteredData.sort((a, b) => a.Year - b.Year);\n\n      // Handle different chart types\n      if (config.type === \"line\") {\n        // Create a dataset for each selected site for the line chart\n        formattedData[parameter] = {\n          labels: filteredData.map(row => row.Year),\n          // X-axis: Years\n          datasets: selectedSites.map(site => ({\n            label: site,\n            // Dataset label (site name)\n            data: filteredData.filter(row => row.Location === site).map(row => parseFloat(row.Value)),\n            // Convert values to numbers\n            borderColor: getRandomColor(),\n            // Assign a random color\n            fill: false,\n            tension: 0.1 // Slight curve in line chart\n          }))\n        };\n      } else if (config.type === \"bar\") {\n        // Bar chart setup: Compare sites at a single point in time\n        formattedData[parameter] = {\n          labels: filteredData.map(row => row.Location),\n          // X-axis: Site names\n          datasets: [{\n            label: parameter,\n            data: filteredData.map(row => parseFloat(row.Value)),\n            // Convert values to numbers\n            backgroundColor: \"gray\" // Single color for all bars\n          }]\n        };\n      }\n    });\n    setChartData(formattedData); // Store the formatted chart data in state\n  };\n\n  // Function to generate random colors for datasets\n  const getRandomColor = () => {\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`; // Random color with fixed saturation & lightness\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plots-container\",\n    children: selectedParameters.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"no-plot-message\",\n      children: \"Select a parameter to display plots.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : selectedParameters.map((param, index) => {\n      var _chartConfig$param, _chartConfig$param2, _chartConfig$param3, _chartConfig$param4, _chartConfig$param5;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plot-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [((_chartConfig$param = chartConfig[param]) === null || _chartConfig$param === void 0 ? void 0 : _chartConfig$param.title) || param, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"plot-content\",\n          children: ((_chartConfig$param2 = chartConfig[param]) === null || _chartConfig$param2 === void 0 ? void 0 : _chartConfig$param2.type) === \"line\" ? /*#__PURE__*/_jsxDEV(Line, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param3 = chartConfig[param]) === null || _chartConfig$param3 === void 0 ? void 0 : _chartConfig$param3.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this) : ((_chartConfig$param4 = chartConfig[param]) === null || _chartConfig$param4 === void 0 ? void 0 : _chartConfig$param4.type) === \"bar\" ?\n          /*#__PURE__*/\n          /* Render a Bar Chart if configured for this parameter */\n          _jsxDEV(Bar, {\n            data: chartData[param],\n            options: {\n              responsive: true,\n              scales: {\n                y: {\n                  title: {\n                    display: true,\n                    text: (_chartConfig$param5 = chartConfig[param]) === null || _chartConfig$param5 === void 0 ? void 0 : _chartConfig$param5.yLabel\n                  }\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No chart available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this) // Fallback message if no valid chart type is found\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(Plots, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = Plots;\nexport default Plots;\nvar _c;\n$RefreshReg$(_c, \"Plots\");","map":{"version":3,"names":["React","useEffect","useState","Line","Bar","Papa","jsxDEV","_jsxDEV","chartConfig","type","title","yLabel","Plots","selectedParameters","selectedSites","startDate","endDate","_s","chartData","setChartData","length","fetch","then","response","text","csvText","parse","header","skipEmptyLines","complete","result","processData","data","formattedData","forEach","parameter","config","filteredData","filter","row","Parameter","includes","Location","Year","getFullYear","sort","a","b","labels","map","datasets","site","label","parseFloat","Value","borderColor","getRandomColor","fill","tension","backgroundColor","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","param","index","_chartConfig$param","_chartConfig$param2","_chartConfig$param3","_chartConfig$param4","_chartConfig$param5","options","responsive","scales","y","display","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/Plots.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport Papa from \"papaparse\";\r\n\r\n// Configuration dictionary that maps each parameter to its respective chart type and labels\r\nconst chartConfig = {\r\n  \"Total Phosphorous\": { \r\n    type: \"line\",  // Line chart for trend visualization over time\r\n    title: \"Total Phosphorus Trend Chart\",\r\n    yLabel: \"Total P (mg/m3)\"  // Y-axis label\r\n  },\r\n  \"Secchi\": { \r\n    type: \"bar\",  // Bar chart for comparison across locations\r\n    title: \"Secchi Comparison Chart\",\r\n    yLabel: \"Secchi (feet)\"  // Y-axis label\r\n  }\r\n};\r\n\r\nfunction Plots({ selectedParameters, selectedSites, startDate, endDate }) {\r\n  const [chartData, setChartData] = useState({}); // Stores data for each selected parameter\r\n\r\n  useEffect(() => {\r\n    // If no parameters are selected, no need to fetch or process data\r\n    if (selectedParameters.length === 0) return;\r\n\r\n    // Fetch water quality data from CSV\r\n    fetch(\"/water_quality_data.csv\")\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (result) => {\r\n            processData(result.data); // Process the parsed CSV data\r\n          }\r\n        });\r\n      });\r\n\r\n  }, [selectedParameters, selectedSites, startDate, endDate]); // Re-fetch data when filters change\r\n\r\n  const processData = (data) => {\r\n    const formattedData = {}; // Object to store formatted datasets for each parameter\r\n\r\n    // Loop through each selected parameter and generate the respective chart data\r\n    selectedParameters.forEach((parameter) => {\r\n      const config = chartConfig[parameter]; // Get chart config for this parameter\r\n      if (!config) return; // Skip if no config is defined for this parameter\r\n\r\n      // Filter data based on selected sites and date range\r\n      let filteredData = data.filter(row => \r\n        row.Parameter === parameter && // Match parameter\r\n        selectedSites.includes(row.Location) && // Match selected site\r\n        row.Year >= startDate.getFullYear() && row.Year <= endDate.getFullYear() // Match year range\r\n      );\r\n\r\n      // Sort data chronologically by Year\r\n      filteredData.sort((a, b) => a.Year - b.Year);\r\n\r\n      // Handle different chart types\r\n      if (config.type === \"line\") {\r\n        // Create a dataset for each selected site for the line chart\r\n        formattedData[parameter] = {\r\n          labels: filteredData.map(row => row.Year), // X-axis: Years\r\n          datasets: selectedSites.map(site => ({\r\n            label: site, // Dataset label (site name)\r\n            data: filteredData\r\n              .filter(row => row.Location === site)\r\n              .map(row => parseFloat(row.Value)), // Convert values to numbers\r\n            borderColor: getRandomColor(), // Assign a random color\r\n            fill: false,\r\n            tension: 0.1 // Slight curve in line chart\r\n          }))\r\n        };\r\n      } else if (config.type === \"bar\") {\r\n        // Bar chart setup: Compare sites at a single point in time\r\n        formattedData[parameter] = {\r\n          labels: filteredData.map(row => row.Location), // X-axis: Site names\r\n          datasets: [\r\n            {\r\n              label: parameter,\r\n              data: filteredData.map(row => parseFloat(row.Value)), // Convert values to numbers\r\n              backgroundColor: \"gray\" // Single color for all bars\r\n            }\r\n          ]\r\n        };\r\n      }\r\n    });\r\n\r\n    setChartData(formattedData); // Store the formatted chart data in state\r\n  };\r\n\r\n  // Function to generate random colors for datasets\r\n  const getRandomColor = () => {\r\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`; // Random color with fixed saturation & lightness\r\n  };\r\n\r\n  return (\r\n    <div className=\"plots-container\">\r\n      {/* If no parameters are selected, show a message */}\r\n      {selectedParameters.length === 0 ? (\r\n        <p className=\"no-plot-message\">Select a parameter to display plots.</p>\r\n      ) : (\r\n        selectedParameters.map((param, index) => (\r\n          <div key={index} className=\"plot-panel\">\r\n            <h4>{chartConfig[param]?.title || param} </h4>\r\n            <div className=\"plot-content\">\r\n              {/* Render a Line Chart if configured for this parameter */}\r\n              {chartConfig[param]?.type === \"line\" ? (\r\n                <Line \r\n                  data={chartData[param]} \r\n                  options={{ \r\n                    responsive: true, \r\n                    scales: { \r\n                      y: { \r\n                        title: { display: true, text: chartConfig[param]?.yLabel } \r\n                      } \r\n                    } \r\n                  }} \r\n                />\r\n              ) : chartConfig[param]?.type === \"bar\" ? (\r\n                /* Render a Bar Chart if configured for this parameter */\r\n                <Bar \r\n                  data={chartData[param]} \r\n                  options={{ \r\n                    responsive: true, \r\n                    scales: { \r\n                      y: { \r\n                        title: { display: true, text: chartConfig[param]?.yLabel } \r\n                      } \r\n                    } \r\n                  }} \r\n                />\r\n              ) : (\r\n                <p>No chart available</p> // Fallback message if no valid chart type is found\r\n              )}\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Plots;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB;AAC3C,OAAO,eAAe;AACtB,OAAOC,IAAI,MAAM,WAAW;;AAE5B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG;EAClB,mBAAmB,EAAE;IACnBC,IAAI,EAAE,MAAM;IAAG;IACfC,KAAK,EAAE,8BAA8B;IACrCC,MAAM,EAAE,iBAAiB,CAAE;EAC7B,CAAC;EACD,QAAQ,EAAE;IACRF,IAAI,EAAE,KAAK;IAAG;IACdC,KAAK,EAAE,yBAAyB;IAChCC,MAAM,EAAE,eAAe,CAAE;EAC3B;AACF,CAAC;AAED,SAASC,KAAKA,CAAC;EAAEC,kBAAkB;EAAEC,aAAa;EAAEC,SAAS;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACxE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhDD,SAAS,CAAC,MAAM;IACd;IACA,IAAIY,kBAAkB,CAACO,MAAM,KAAK,CAAC,EAAE;;IAErC;IACAC,KAAK,CAAC,yBAAyB,CAAC,CAC7BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,OAAO,IAAK;MACjBpB,IAAI,CAACqB,KAAK,CAACD,OAAO,EAAE;QAClBE,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,QAAQ,EAAGC,MAAM,IAAK;UACpBC,WAAW,CAACD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EAEN,CAAC,EAAE,CAACnB,kBAAkB,EAAEC,aAAa,EAAEC,SAAS,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE7D,MAAMe,WAAW,GAAIC,IAAI,IAAK;IAC5B,MAAMC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE1B;IACApB,kBAAkB,CAACqB,OAAO,CAAEC,SAAS,IAAK;MACxC,MAAMC,MAAM,GAAG5B,WAAW,CAAC2B,SAAS,CAAC,CAAC,CAAC;MACvC,IAAI,CAACC,MAAM,EAAE,OAAO,CAAC;;MAErB;MACA,IAAIC,YAAY,GAAGL,IAAI,CAACM,MAAM,CAACC,GAAG,IAChCA,GAAG,CAACC,SAAS,KAAKL,SAAS;MAAI;MAC/BrB,aAAa,CAAC2B,QAAQ,CAACF,GAAG,CAACG,QAAQ,CAAC;MAAI;MACxCH,GAAG,CAACI,IAAI,IAAI5B,SAAS,CAAC6B,WAAW,CAAC,CAAC,IAAIL,GAAG,CAACI,IAAI,IAAI3B,OAAO,CAAC4B,WAAW,CAAC,CAAC,CAAC;MAC3E,CAAC;;MAED;MACAP,YAAY,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,IAAI,GAAGI,CAAC,CAACJ,IAAI,CAAC;;MAE5C;MACA,IAAIP,MAAM,CAAC3B,IAAI,KAAK,MAAM,EAAE;QAC1B;QACAwB,aAAa,CAACE,SAAS,CAAC,GAAG;UACzBa,MAAM,EAAEX,YAAY,CAACY,GAAG,CAACV,GAAG,IAAIA,GAAG,CAACI,IAAI,CAAC;UAAE;UAC3CO,QAAQ,EAAEpC,aAAa,CAACmC,GAAG,CAACE,IAAI,KAAK;YACnCC,KAAK,EAAED,IAAI;YAAE;YACbnB,IAAI,EAAEK,YAAY,CACfC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACG,QAAQ,KAAKS,IAAI,CAAC,CACpCF,GAAG,CAACV,GAAG,IAAIc,UAAU,CAACd,GAAG,CAACe,KAAK,CAAC,CAAC;YAAE;YACtCC,WAAW,EAAEC,cAAc,CAAC,CAAC;YAAE;YAC/BC,IAAI,EAAE,KAAK;YACXC,OAAO,EAAE,GAAG,CAAC;UACf,CAAC,CAAC;QACJ,CAAC;MACH,CAAC,MAAM,IAAItB,MAAM,CAAC3B,IAAI,KAAK,KAAK,EAAE;QAChC;QACAwB,aAAa,CAACE,SAAS,CAAC,GAAG;UACzBa,MAAM,EAAEX,YAAY,CAACY,GAAG,CAACV,GAAG,IAAIA,GAAG,CAACG,QAAQ,CAAC;UAAE;UAC/CQ,QAAQ,EAAE,CACR;YACEE,KAAK,EAAEjB,SAAS;YAChBH,IAAI,EAAEK,YAAY,CAACY,GAAG,CAACV,GAAG,IAAIc,UAAU,CAACd,GAAG,CAACe,KAAK,CAAC,CAAC;YAAE;YACtDK,eAAe,EAAE,MAAM,CAAC;UAC1B,CAAC;QAEL,CAAC;MACH;IACF,CAAC,CAAC;IAEFxC,YAAY,CAACc,aAAa,CAAC,CAAC,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMuB,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAO,OAAOI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,aAAa,CAAC,CAAC;EAC9D,CAAC;EAED,oBACEvD,OAAA;IAAKwD,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAE7BnD,kBAAkB,CAACO,MAAM,KAAK,CAAC,gBAC9Bb,OAAA;MAAGwD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAAC;IAAoC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEvEvD,kBAAkB,CAACoC,GAAG,CAAC,CAACoB,KAAK,EAAEC,KAAK;MAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA;MAAA,oBAClCpE,OAAA;QAAiBwD,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACrCzD,OAAA;UAAAyD,QAAA,GAAK,EAAAO,kBAAA,GAAA/D,WAAW,CAAC6D,KAAK,CAAC,cAAAE,kBAAA,uBAAlBA,kBAAA,CAAoB7D,KAAK,KAAI2D,KAAK,EAAC,GAAC;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9C7D,OAAA;UAAKwD,SAAS,EAAC,cAAc;UAAAC,QAAA,EAE1B,EAAAQ,mBAAA,GAAAhE,WAAW,CAAC6D,KAAK,CAAC,cAAAG,mBAAA,uBAAlBA,mBAAA,CAAoB/D,IAAI,MAAK,MAAM,gBAClCF,OAAA,CAACJ,IAAI;YACH6B,IAAI,EAAEd,SAAS,CAACmD,KAAK,CAAE;YACvBO,OAAO,EAAE;cACPC,UAAU,EAAE,IAAI;cAChBC,MAAM,EAAE;gBACNC,CAAC,EAAE;kBACDrE,KAAK,EAAE;oBAAEsE,OAAO,EAAE,IAAI;oBAAExD,IAAI,GAAAiD,mBAAA,GAAEjE,WAAW,CAAC6D,KAAK,CAAC,cAAAI,mBAAA,uBAAlBA,mBAAA,CAAoB9D;kBAAO;gBAC3D;cACF;YACF;UAAE;YAAAsD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,GACA,EAAAM,mBAAA,GAAAlE,WAAW,CAAC6D,KAAK,CAAC,cAAAK,mBAAA,uBAAlBA,mBAAA,CAAoBjE,IAAI,MAAK,KAAK;UAAA;UACpC;UACAF,OAAA,CAACH,GAAG;YACF4B,IAAI,EAAEd,SAAS,CAACmD,KAAK,CAAE;YACvBO,OAAO,EAAE;cACPC,UAAU,EAAE,IAAI;cAChBC,MAAM,EAAE;gBACNC,CAAC,EAAE;kBACDrE,KAAK,EAAE;oBAAEsE,OAAO,EAAE,IAAI;oBAAExD,IAAI,GAAAmD,mBAAA,GAAEnE,WAAW,CAAC6D,KAAK,CAAC,cAAAM,mBAAA,uBAAlBA,mBAAA,CAAoBhE;kBAAO;gBAC3D;cACF;YACF;UAAE;YAAAsD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,gBAEF7D,OAAA;YAAAyD,QAAA,EAAG;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,CAAC;QAC3B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA,GAhCEE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiCV,CAAC;IAAA,CACP;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnD,EAAA,CA3HQL,KAAK;AAAAqE,EAAA,GAALrE,KAAK;AA6Hd,eAAeA,KAAK;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}