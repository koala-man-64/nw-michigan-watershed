{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdpro\\\\Projects\\\\NW Michigan Watershed Coalition\\\\dashboard\\\\src\\\\Data.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Data() {\n  _s();\n  // List of available CSV files in the public folder\n  const csvFiles = [\"locations.csv\", \"water_quality_data.csv\"];\n  const [selectedFile, setSelectedFile] = useState(csvFiles[0]);\n  const [csvData, setCsvData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Function to load CSV file from public folder\n  const loadCSV = fileName => {\n    setLoading(true);\n    fetch(`/${fileName}`).then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        complete: result => {\n          // Remove rows that are completely empty\n          const filteredData = result.data.filter(row => Object.values(row).some(val => val && val.toString().trim() !== \"\"));\n          setCsvData(filteredData);\n          setLoading(false);\n        }\n      });\n    }).catch(error => {\n      console.error(\"Error loading CSV:\", error);\n      setLoading(false);\n    });\n  };\n\n  // Load CSV whenever the selected file changes\n  useEffect(() => {\n    loadCSV(selectedFile);\n  }, [selectedFile]);\n\n  // Handle changes in CSV data cells\n  const handleChange = (rowIndex, field, newValue) => {\n    const updatedData = [...csvData];\n    updatedData[rowIndex][field] = newValue;\n    setCsvData(updatedData);\n  };\n\n  // Add new row: use headers from the first row if available\n  const addNewRow = () => {\n    let newRow = {};\n    if (csvData.length > 0) {\n      const headers = Object.keys(csvData[0]);\n      headers.forEach(header => {\n        newRow[header] = \"\";\n      });\n    }\n    setCsvData([...csvData, newRow]);\n  };\n\n  // Commit save function: simulate saving by downloading the updated CSV file\n  const commitSave = () => {\n    const csv = Papa.unparse(csvData);\n    const blob = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    const updatedFileName = selectedFile.replace(\".csv\", \"_updated.csv\");\n    link.download = updatedFileName;\n    link.click();\n    // In a real application, you might send the updated data to a backend server here.\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading CSV data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Data Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"csv-select\",\n        children: \"Select CSV File: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"csv-select\",\n        value: selectedFile,\n        onChange: e => setSelectedFile(e.target.value),\n        children: csvFiles.map((file, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: file,\n          children: file\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewRow,\n        children: \"Add New Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"5\",\n      cellSpacing: \"0\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: csvData.length > 0 && Object.keys(csvData[0]).map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: csvData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: Object.entries(row).map(([field, value], colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: value,\n              onChange: e => handleChange(rowIndex, field, e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: commitSave,\n      children: \"Commit Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Data, \"apMcYVI/Us8zD/6fAK6IdEHvx28=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","Papa","jsxDEV","_jsxDEV","Data","_s","csvFiles","selectedFile","setSelectedFile","csvData","setCsvData","loading","setLoading","loadCSV","fileName","fetch","then","response","text","csvText","parse","header","complete","result","filteredData","data","filter","row","Object","values","some","val","toString","trim","catch","error","console","handleChange","rowIndex","field","newValue","updatedData","addNewRow","newRow","length","headers","keys","forEach","commitSave","csv","unparse","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","updatedFileName","replace","download","click","children","_jsxFileName","lineNumber","columnNumber","style","padding","marginBottom","htmlFor","id","value","onChange","e","target","map","file","idx","onClick","border","cellPadding","cellSpacing","index","entries","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/rdpro/Projects/NW Michigan Watershed Coalition/dashboard/src/Data.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\n\r\nfunction Data() {\r\n  // List of available CSV files in the public folder\r\n  const csvFiles = [\"locations.csv\", \"water_quality_data.csv\"];\r\n  const [selectedFile, setSelectedFile] = useState(csvFiles[0]);\r\n  const [csvData, setCsvData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Function to load CSV file from public folder\r\n  const loadCSV = (fileName) => {\r\n    setLoading(true);\r\n    fetch(`/${fileName}`)\r\n      .then((response) => response.text())\r\n      .then((csvText) => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          complete: (result) => {\r\n            // Remove rows that are completely empty\r\n            const filteredData = result.data.filter(row =>\r\n              Object.values(row).some(\r\n                (val) => val && val.toString().trim() !== \"\"\r\n              )\r\n            );\r\n            setCsvData(filteredData);\r\n            setLoading(false);\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading CSV:\", error);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // Load CSV whenever the selected file changes\r\n  useEffect(() => {\r\n    loadCSV(selectedFile);\r\n  }, [selectedFile]);\r\n\r\n  // Handle changes in CSV data cells\r\n  const handleChange = (rowIndex, field, newValue) => {\r\n    const updatedData = [...csvData];\r\n    updatedData[rowIndex][field] = newValue;\r\n    setCsvData(updatedData);\r\n  };\r\n\r\n  // Add new row: use headers from the first row if available\r\n  const addNewRow = () => {\r\n    let newRow = {};\r\n    if (csvData.length > 0) {\r\n      const headers = Object.keys(csvData[0]);\r\n      headers.forEach((header) => {\r\n        newRow[header] = \"\";\r\n      });\r\n    }\r\n    setCsvData([...csvData, newRow]);\r\n  };\r\n\r\n  // Commit save function: simulate saving by downloading the updated CSV file\r\n  const commitSave = () => {\r\n    const csv = Papa.unparse(csvData);\r\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    const updatedFileName = selectedFile.replace(\".csv\", \"_updated.csv\");\r\n    link.download = updatedFileName;\r\n    link.click();\r\n    // In a real application, you might send the updated data to a backend server here.\r\n  };\r\n\r\n  if (loading) return <div>Loading CSV data...</div>;\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <h2>Data Editor</h2>\r\n      {/* CSV File Selection */}\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <label htmlFor=\"csv-select\">Select CSV File: </label>\r\n        <select\r\n          id=\"csv-select\"\r\n          value={selectedFile}\r\n          onChange={(e) => setSelectedFile(e.target.value)}\r\n        >\r\n          {csvFiles.map((file, idx) => (\r\n            <option key={idx} value={file}>\r\n              {file}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {/* Add New Row Button */}\r\n      <div style={{ marginBottom: \"15px\" }}>\r\n        <button onClick={addNewRow}>Add New Row</button>\r\n      </div>\r\n      {/* Editable CSV Data Table */}\r\n      <table border=\"1\" cellPadding=\"5\" cellSpacing=\"0\">\r\n        <thead>\r\n          <tr>\r\n            {csvData.length > 0 &&\r\n              Object.keys(csvData[0]).map((header, index) => (\r\n                <th key={index}>{header}</th>\r\n              ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {csvData.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {Object.entries(row).map(([field, value], colIndex) => (\r\n                <td key={colIndex}>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={value}\r\n                    onChange={(e) =>\r\n                      handleChange(rowIndex, field, e.target.value)\r\n                    }\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n      {/* Commit Save Button */}\r\n      <button onClick={commitSave}>Commit Save</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Data;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}